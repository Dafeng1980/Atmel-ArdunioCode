
GccApplication_ledDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000560  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000189  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000407  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000128  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000193  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  9e:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DelayMs>:
  uchar g_aDisplayBuf[16]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, \
0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e};
void DelayMs(uint t)
{
	uint i;
	for(i=0;i<t;i++)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	61 f0       	breq	.+24     	; 0xc2 <DelayMs+0x1c>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	4e ee       	ldi	r20, 0xEE	; 238
  b0:	52 e0       	ldi	r21, 0x02	; 2
  b2:	fa 01       	movw	r30, r20
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <DelayMs+0xe>
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	28 17       	cp	r18, r24
  be:	39 07       	cpc	r19, r25
  c0:	c1 f7       	brne	.-16     	; 0xb2 <DelayMs+0xc>
  c2:	08 95       	ret

000000c4 <SPI_595T>:
	_delay_loop_2(250*3);
}
void SPI_595T(uchar a)
{
	SPDR=a;
  c4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR&(1<<SPIF)))
  c6:	0d b4       	in	r0, 0x2d	; 45
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <SPI_595T+0x2>
	{
		;
	}
}
  cc:	08 95       	ret

000000ce <displayNumber>:
void displayNumber(uchar num,uchar hex)

{
  ce:	cf 93       	push	r28
  d0:	48 2f       	mov	r20, r24
	uchar buf[2];
	uchar temp;
	CLR_SHC;
  d2:	5b 98       	cbi	0x0b, 3	; 11
	if(hex)
  d4:	66 23       	and	r22, r22
  d6:	71 f0       	breq	.+28     	; 0xf4 <displayNumber+0x26>
	{
		buf[0]=g_aDisplayBuf[num>>4];
  d8:	82 95       	swap	r24
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	31 e0       	ldi	r19, 0x01	; 1
  e0:	f9 01       	movw	r30, r18
  e2:	e8 0f       	add	r30, r24
  e4:	f1 1d       	adc	r31, r1
  e6:	c0 81       	ld	r28, Z
		buf[1]=g_aDisplayBuf[num&0x0f];
  e8:	4f 70       	andi	r20, 0x0F	; 15
  ea:	24 0f       	add	r18, r20
  ec:	31 1d       	adc	r19, r1
  ee:	f9 01       	movw	r30, r18
  f0:	50 81       	ld	r21, Z
  f2:	1d c0       	rjmp	.+58     	; 0x12e <displayNumber+0x60>
	}
	else
	{
		buf[1]=g_aDisplayBuf[num%10];
  f4:	aa e0       	ldi	r26, 0x0A	; 10
  f6:	6a 2f       	mov	r22, r26
  f8:	0e 94 c0 00 	call	0x180	; 0x180 <__udivmodqi4>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	31 e0       	ldi	r19, 0x01	; 1
 100:	f9 01       	movw	r30, r18
 102:	e9 0f       	add	r30, r25
 104:	f1 1d       	adc	r31, r1
 106:	50 81       	ld	r21, Z
		temp=num%100;
 108:	84 2f       	mov	r24, r20
 10a:	64 e6       	ldi	r22, 0x64	; 100
 10c:	0e 94 c0 00 	call	0x180	; 0x180 <__udivmodqi4>
 110:	48 2f       	mov	r20, r24
 112:	89 2f       	mov	r24, r25
		buf[0]=g_aDisplayBuf[temp/10];
 114:	6a 2f       	mov	r22, r26
 116:	0e 94 c0 00 	call	0x180	; 0x180 <__udivmodqi4>
 11a:	28 0f       	add	r18, r24
 11c:	31 1d       	adc	r19, r1
 11e:	f9 01       	movw	r30, r18
 120:	c0 81       	ld	r28, Z
		temp=num/100;
		if(temp>0)
 122:	44 23       	and	r20, r20
 124:	21 f0       	breq	.+8      	; 0x12e <displayNumber+0x60>
		buf[1]|=0x80; //第一个数码管小数点表示百位1
 126:	50 68       	ori	r21, 0x80	; 128
		if(temp>1)
 128:	42 30       	cpi	r20, 0x02	; 2
 12a:	08 f0       	brcs	.+2      	; 0x12e <displayNumber+0x60>
		buf[0]|=0x80;//两个数码管小数点表示百位2
 12c:	c0 68       	ori	r28, 0x80	; 128
	}
	SPI_595T(buf[1]);
 12e:	85 2f       	mov	r24, r21
 130:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_595T>
	SPI_595T(buf[0]);
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_595T>
	SET_SHC;
 13a:	5b 9a       	sbi	0x0b, 3	; 11
	
	}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <Port_init>:
	void Port_init(void)
	{
		PORTB=0x00;
 140:	15 b8       	out	0x05, r1	; 5
		DDRB=0x3F;
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	84 b9       	out	0x04, r24	; 4
		PORTC=0x00;
 146:	18 b8       	out	0x08, r1	; 8
		DDRC=0x00;
 148:	17 b8       	out	0x07, r1	; 7
		PORTD=0x00;
 14a:	1b b8       	out	0x0b, r1	; 11
		DDRD=0x08;
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	8a b9       	out	0x0a, r24	; 10
	}
 150:	08 95       	ret

00000152 <Spi_init>:
	void Spi_init(void)
	{
		DDRB|=_BV(PB5)|_BV(PB3);
 152:	84 b1       	in	r24, 0x04	; 4
 154:	88 62       	ori	r24, 0x28	; 40
 156:	84 b9       	out	0x04, r24	; 4
		SPCR=0x51;
 158:	81 e5       	ldi	r24, 0x51	; 81
 15a:	8c bd       	out	0x2c, r24	; 44
		SPSR=0x00;
 15c:	1d bc       	out	0x2d, r1	; 45
	}
 15e:	08 95       	ret

00000160 <main>:

int main(void)

{
	uchar i=0;
   Port_init();
 160:	0e 94 a0 00 	call	0x140	; 0x140 <Port_init>
   Spi_init();
 164:	0e 94 a9 00 	call	0x152	; 0x152 <Spi_init>
	

int main(void)

{
	uchar i=0;
 168:	80 e0       	ldi	r24, 0x00	; 0
   Port_init();
   Spi_init();
   
    while(1)
    {
       displayNumber(i++,1);
 16a:	c8 2f       	mov	r28, r24
 16c:	cf 5f       	subi	r28, 0xFF	; 255
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	0e 94 67 00 	call	0xce	; 0xce <displayNumber>
       DelayMs(1000);
 174:	88 ee       	ldi	r24, 0xE8	; 232
 176:	93 e0       	ldi	r25, 0x03	; 3
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <DelayMs>
   Port_init();
   Spi_init();
   
    while(1)
    {
       displayNumber(i++,1);
 17c:	8c 2f       	mov	r24, r28
 17e:	f5 cf       	rjmp	.-22     	; 0x16a <main+0xa>

00000180 <__udivmodqi4>:
 180:	99 1b       	sub	r25, r25
 182:	79 e0       	ldi	r23, 0x09	; 9
 184:	04 c0       	rjmp	.+8      	; 0x18e <__udivmodqi4_ep>

00000186 <__udivmodqi4_loop>:
 186:	99 1f       	adc	r25, r25
 188:	96 17       	cp	r25, r22
 18a:	08 f0       	brcs	.+2      	; 0x18e <__udivmodqi4_ep>
 18c:	96 1b       	sub	r25, r22

0000018e <__udivmodqi4_ep>:
 18e:	88 1f       	adc	r24, r24
 190:	7a 95       	dec	r23
 192:	c9 f7       	brne	.-14     	; 0x186 <__udivmodqi4_loop>
 194:	80 95       	com	r24
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
