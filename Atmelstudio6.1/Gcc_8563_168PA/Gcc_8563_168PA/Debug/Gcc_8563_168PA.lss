
Gcc_8563_168PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000005b4  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000652  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000da8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004d8  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000178  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000411  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000013d  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000299  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
  9e:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Twi_Init>:
uchar buff[3];
uchar g_aDisplayBuf[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
//TWI≥ı ºªØ
void Twi_Init(void)
   {
   TWBR=12;
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 93 b8 00 	sts	0x00B8, r24
   TWSR=0;
  ac:	10 92 b9 00 	sts	0x00B9, r1
   }
  b0:	08 95       	ret

000000b2 <PFC8563_Write>:
uchar PFC8563_Write(uchar slv_addw,uchar sub_suba,uchar Wdata)
{
	Start();
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	90 93 bc 00 	sts	0x00BC, r25
	Wait();
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	99 23       	and	r25, r25
  c0:	ec f7       	brge	.-6      	; 0xbc <PFC8563_Write+0xa>
	if(TestAck()!=START)return I2C_CRR;
  c2:	90 91 b9 00 	lds	r25, 0x00B9
  c6:	98 7f       	andi	r25, 0xF8	; 248
  c8:	98 30       	cpi	r25, 0x08	; 8
  ca:	09 f0       	breq	.+2      	; 0xce <PFC8563_Write+0x1c>
  cc:	b6 c0       	rjmp	.+364    	; 0x23a <PFC8563_Write+0x188>
	SendByte(slv_addw);
  ce:	80 93 bb 00 	sts	0x00BB, r24
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
  d8:	ec eb       	ldi	r30, 0xBC	; 188
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	ec f7       	brge	.-6      	; 0xdc <PFC8563_Write+0x2a>
	if(TestAck()!=MT_SLA_ACK)return I2C_CRR;
  e2:	80 91 b9 00 	lds	r24, 0x00B9
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	88 31       	cpi	r24, 0x18	; 24
  ea:	09 f0       	breq	.+2      	; 0xee <PFC8563_Write+0x3c>
  ec:	a8 c0       	rjmp	.+336    	; 0x23e <PFC8563_Write+0x18c>
	SendByte(sub_suba);
  ee:	60 93 bb 00 	sts	0x00BB, r22
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 23       	and	r24, r24
 100:	ec f7       	brge	.-6      	; 0xfc <PFC8563_Write+0x4a>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 102:	80 91 b9 00 	lds	r24, 0x00B9
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	88 32       	cpi	r24, 0x28	; 40
 10a:	09 f0       	breq	.+2      	; 0x10e <PFC8563_Write+0x5c>
 10c:	9a c0       	rjmp	.+308    	; 0x242 <PFC8563_Write+0x190>
	SendByte(Wdata);
 10e:	40 93 bb 00 	sts	0x00BB, r20
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 118:	ec eb       	ldi	r30, 0xBC	; 188
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <PFC8563_Write+0x6a>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 122:	80 91 b9 00 	lds	r24, 0x00B9
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	88 32       	cpi	r24, 0x28	; 40
 12a:	09 f0       	breq	.+2      	; 0x12e <PFC8563_Write+0x7c>
 12c:	8c c0       	rjmp	.+280    	; 0x246 <PFC8563_Write+0x194>
	SendByte(0x00);
 12e:	10 92 bb 00 	sts	0x00BB, r1
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <PFC8563_Write+0x8a>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 142:	80 91 b9 00 	lds	r24, 0x00B9
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	88 32       	cpi	r24, 0x28	; 40
 14a:	09 f0       	breq	.+2      	; 0x14e <PFC8563_Write+0x9c>
 14c:	7e c0       	rjmp	.+252    	; 0x24a <PFC8563_Write+0x198>
	SendByte(0x00);                            //Seconds
 14e:	10 92 bb 00 	sts	0x00BB, r1
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 158:	ec eb       	ldi	r30, 0xBC	; 188
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	ec f7       	brge	.-6      	; 0x15c <PFC8563_Write+0xaa>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 162:	80 91 b9 00 	lds	r24, 0x00B9
 166:	88 7f       	andi	r24, 0xF8	; 248
 168:	88 32       	cpi	r24, 0x28	; 40
 16a:	09 f0       	breq	.+2      	; 0x16e <PFC8563_Write+0xbc>
 16c:	70 c0       	rjmp	.+224    	; 0x24e <PFC8563_Write+0x19c>
	SendByte(0x15);                               //Minutes     
 16e:	85 e1       	ldi	r24, 0x15	; 21
 170:	80 93 bb 00 	sts	0x00BB, r24
 174:	84 e8       	ldi	r24, 0x84	; 132
 176:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 17a:	ec eb       	ldi	r30, 0xBC	; 188
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	ec f7       	brge	.-6      	; 0x17e <PFC8563_Write+0xcc>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 184:	80 91 b9 00 	lds	r24, 0x00B9
 188:	88 7f       	andi	r24, 0xF8	; 248
 18a:	88 32       	cpi	r24, 0x28	; 40
 18c:	09 f0       	breq	.+2      	; 0x190 <PFC8563_Write+0xde>
 18e:	61 c0       	rjmp	.+194    	; 0x252 <PFC8563_Write+0x1a0>
	SendByte(0x02);                               //Hours
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	80 93 bb 00 	sts	0x00BB, r24
 196:	84 e8       	ldi	r24, 0x84	; 132
 198:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 19c:	ec eb       	ldi	r30, 0xBC	; 188
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	ec f7       	brge	.-6      	; 0x1a0 <PFC8563_Write+0xee>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 1a6:	80 91 b9 00 	lds	r24, 0x00B9
 1aa:	88 7f       	andi	r24, 0xF8	; 248
 1ac:	88 32       	cpi	r24, 0x28	; 40
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <PFC8563_Write+0x100>
 1b0:	52 c0       	rjmp	.+164    	; 0x256 <PFC8563_Write+0x1a4>
	SendByte(0x28);                               //Days
 1b2:	80 93 bb 00 	sts	0x00BB, r24
 1b6:	84 e8       	ldi	r24, 0x84	; 132
 1b8:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 1bc:	ec eb       	ldi	r30, 0xBC	; 188
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	ec f7       	brge	.-6      	; 0x1c0 <PFC8563_Write+0x10e>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 1c6:	80 91 b9 00 	lds	r24, 0x00B9
 1ca:	88 7f       	andi	r24, 0xF8	; 248
 1cc:	88 32       	cpi	r24, 0x28	; 40
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <PFC8563_Write+0x120>
 1d0:	44 c0       	rjmp	.+136    	; 0x25a <PFC8563_Write+0x1a8>
	SendByte(0x00);                               //Weekdays
 1d2:	10 92 bb 00 	sts	0x00BB, r1
 1d6:	84 e8       	ldi	r24, 0x84	; 132
 1d8:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 1dc:	ec eb       	ldi	r30, 0xBC	; 188
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 23       	and	r24, r24
 1e4:	ec f7       	brge	.-6      	; 0x1e0 <PFC8563_Write+0x12e>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 1e6:	80 91 b9 00 	lds	r24, 0x00B9
 1ea:	88 7f       	andi	r24, 0xF8	; 248
 1ec:	88 32       	cpi	r24, 0x28	; 40
 1ee:	b9 f5       	brne	.+110    	; 0x25e <PFC8563_Write+0x1ac>
	SendByte(0x10);                               //Century_months
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	80 93 bb 00 	sts	0x00BB, r24
 1f6:	84 e8       	ldi	r24, 0x84	; 132
 1f8:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	ec f7       	brge	.-6      	; 0x200 <PFC8563_Write+0x14e>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 206:	80 91 b9 00 	lds	r24, 0x00B9
 20a:	88 7f       	andi	r24, 0xF8	; 248
 20c:	88 32       	cpi	r24, 0x28	; 40
 20e:	49 f5       	brne	.+82     	; 0x262 <PFC8563_Write+0x1b0>
	SendByte(0x12);                               //Years
 210:	82 e1       	ldi	r24, 0x12	; 18
 212:	80 93 bb 00 	sts	0x00BB, r24
 216:	84 e8       	ldi	r24, 0x84	; 132
 218:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 21c:	ec eb       	ldi	r30, 0xBC	; 188
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	88 23       	and	r24, r24
 224:	ec f7       	brge	.-6      	; 0x220 <PFC8563_Write+0x16e>
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 226:	80 91 b9 00 	lds	r24, 0x00B9
 22a:	88 7f       	andi	r24, 0xF8	; 248
 22c:	88 32       	cpi	r24, 0x28	; 40
 22e:	d9 f4       	brne	.+54     	; 0x266 <PFC8563_Write+0x1b4>
	
	
	stop();
 230:	84 e9       	ldi	r24, 0x94	; 148
 232:	80 93 bc 00 	sts	0x00BC, r24
	return I2C_ERR;
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
   }
uchar PFC8563_Write(uchar slv_addw,uchar sub_suba,uchar Wdata)
{
	Start();
	Wait();
	if(TestAck()!=START)return I2C_CRR;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	08 95       	ret
	SendByte(slv_addw);
	Wait();
	if(TestAck()!=MT_SLA_ACK)return I2C_CRR;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	08 95       	ret
	SendByte(sub_suba);
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	08 95       	ret
	SendByte(Wdata);
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
	SendByte(0x00);
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret
	SendByte(0x00);                            //Seconds
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret
	SendByte(0x15);                               //Minutes     
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
	SendByte(0x02);                               //Hours
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
	SendByte(0x28);                               //Days
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	08 95       	ret
	SendByte(0x00);                               //Weekdays
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	08 95       	ret
	SendByte(0x10);                               //Century_months
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	08 95       	ret
	SendByte(0x12);                               //Years
	Wait();
	if(TestAck()!=MT_DATA_ACK)return I2C_CRR;
 266:	81 e0       	ldi	r24, 0x01	; 1
	
	
	stop();
	return I2C_ERR;
}
 268:	08 95       	ret

0000026a <PFC8563_Read>:
uchar PFC8563_Read(uchar slv_addr,uchar suba,uchar *s,uchar num)
{
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
	uchar n;
	Start();
 276:	94 ea       	ldi	r25, 0xA4	; 164
 278:	90 93 bc 00 	sts	0x00BC, r25
	Wait();
 27c:	ec eb       	ldi	r30, 0xBC	; 188
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	90 81       	ld	r25, Z
 282:	99 23       	and	r25, r25
 284:	ec f7       	brge	.-6      	; 0x280 <PFC8563_Read+0x16>
	if(TestAck()!=START)return 1;
 286:	90 91 b9 00 	lds	r25, 0x00B9
 28a:	98 7f       	andi	r25, 0xF8	; 248
 28c:	98 30       	cpi	r25, 0x08	; 8
 28e:	09 f0       	breq	.+2      	; 0x292 <PFC8563_Read+0x28>
 290:	7d c0       	rjmp	.+250    	; 0x38c <PFC8563_Read+0x122>
	SendByte(slv_addr-1);
 292:	98 2f       	mov	r25, r24
 294:	91 50       	subi	r25, 0x01	; 1
 296:	90 93 bb 00 	sts	0x00BB, r25
 29a:	94 e8       	ldi	r25, 0x84	; 132
 29c:	90 93 bc 00 	sts	0x00BC, r25
	Wait();
 2a0:	ec eb       	ldi	r30, 0xBC	; 188
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	90 81       	ld	r25, Z
 2a6:	99 23       	and	r25, r25
 2a8:	ec f7       	brge	.-6      	; 0x2a4 <PFC8563_Read+0x3a>
	if(TestAck()!=MT_SLA_ACK)return 1;
 2aa:	90 91 b9 00 	lds	r25, 0x00B9
 2ae:	98 7f       	andi	r25, 0xF8	; 248
 2b0:	98 31       	cpi	r25, 0x18	; 24
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <PFC8563_Read+0x4c>
 2b4:	6d c0       	rjmp	.+218    	; 0x390 <PFC8563_Read+0x126>
	SendByte(suba);
 2b6:	60 93 bb 00 	sts	0x00BB, r22
 2ba:	94 e8       	ldi	r25, 0x84	; 132
 2bc:	90 93 bc 00 	sts	0x00BC, r25
	Wait();
 2c0:	ec eb       	ldi	r30, 0xBC	; 188
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	90 81       	ld	r25, Z
 2c6:	99 23       	and	r25, r25
 2c8:	ec f7       	brge	.-6      	; 0x2c4 <PFC8563_Read+0x5a>
	if(TestAck()!=MT_DATA_ACK)return 1;
 2ca:	90 91 b9 00 	lds	r25, 0x00B9
 2ce:	98 7f       	andi	r25, 0xF8	; 248
 2d0:	98 32       	cpi	r25, 0x28	; 40
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <PFC8563_Read+0x6c>
 2d4:	5f c0       	rjmp	.+190    	; 0x394 <PFC8563_Read+0x12a>
	stop();
 2d6:	ec eb       	ldi	r30, 0xBC	; 188
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	94 e9       	ldi	r25, 0x94	; 148
 2dc:	90 83       	st	Z, r25
	Start();
 2de:	94 ea       	ldi	r25, 0xA4	; 164
 2e0:	90 83       	st	Z, r25
	Wait();
 2e2:	90 81       	ld	r25, Z
 2e4:	99 23       	and	r25, r25
 2e6:	ec f7       	brge	.-6      	; 0x2e2 <PFC8563_Read+0x78>
	if(TestAck()!=RESTART)return 1;
 2e8:	90 91 b9 00 	lds	r25, 0x00B9
 2ec:	98 7f       	andi	r25, 0xF8	; 248
 2ee:	90 31       	cpi	r25, 0x10	; 16
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <PFC8563_Read+0x8a>
 2f2:	52 c0       	rjmp	.+164    	; 0x398 <PFC8563_Read+0x12e>
	SendByte(slv_addr);
 2f4:	80 93 bb 00 	sts	0x00BB, r24
 2f8:	84 e8       	ldi	r24, 0x84	; 132
 2fa:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 2fe:	ec eb       	ldi	r30, 0xBC	; 188
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	88 23       	and	r24, r24
 306:	ec f7       	brge	.-6      	; 0x302 <PFC8563_Read+0x98>
	if(TestAck()!=MR_SLA_ACK)return 1;
 308:	80 91 b9 00 	lds	r24, 0x00B9
 30c:	88 7f       	andi	r24, 0xF8	; 248
 30e:	80 34       	cpi	r24, 0x40	; 64
 310:	09 f0       	breq	.+2      	; 0x314 <PFC8563_Read+0xaa>
 312:	44 c0       	rjmp	.+136    	; 0x39c <PFC8563_Read+0x132>
	for (n=0;n<num-1;n++)
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	21 50       	subi	r18, 0x01	; 1
 318:	30 40       	sbci	r19, 0x00	; 0
 31a:	12 16       	cp	r1, r18
 31c:	13 06       	cpc	r1, r19
 31e:	04 f5       	brge	.+64     	; 0x360 <PFC8563_Read+0xf6>
 320:	04 2f       	mov	r16, r20
 322:	a4 2f       	mov	r26, r20
 324:	b5 2f       	mov	r27, r21
	{
		rcvAckByte();
 326:	ec eb       	ldi	r30, 0xBC	; 188
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	14 ec       	ldi	r17, 0xC4	; 196
		Wait();
		if(TestAck()!=MR_DATA_ACK)return 1;
 32c:	0f 2e       	mov	r0, r31
 32e:	f9 eb       	ldi	r31, 0xB9	; 185
 330:	ef 2e       	mov	r14, r31
 332:	ff 24       	eor	r15, r15
 334:	f0 2d       	mov	r31, r0
		*s=TWDR;
 336:	6b eb       	ldi	r22, 0xBB	; 187
 338:	70 e0       	ldi	r23, 0x00	; 0
	SendByte(slv_addr);
	Wait();
	if(TestAck()!=MR_SLA_ACK)return 1;
	for (n=0;n<num-1;n++)
	{
		rcvAckByte();
 33a:	10 83       	st	Z, r17
		Wait();
 33c:	80 81       	ld	r24, Z
 33e:	88 23       	and	r24, r24
 340:	ec f7       	brge	.-6      	; 0x33c <PFC8563_Read+0xd2>
		if(TestAck()!=MR_DATA_ACK)return 1;
 342:	e7 01       	movw	r28, r14
 344:	88 81       	ld	r24, Y
 346:	88 7f       	andi	r24, 0xF8	; 248
 348:	80 35       	cpi	r24, 0x50	; 80
 34a:	51 f5       	brne	.+84     	; 0x3a0 <PFC8563_Read+0x136>
		*s=TWDR;
 34c:	eb 01       	movw	r28, r22
 34e:	88 81       	ld	r24, Y
 350:	8d 93       	st	X+, r24
		s++;
 352:	ad 01       	movw	r20, r26
	
	
	stop();
	return I2C_ERR;
}
uchar PFC8563_Read(uchar slv_addr,uchar suba,uchar *s,uchar num)
 354:	8a 2f       	mov	r24, r26
 356:	80 1b       	sub	r24, r16
	Wait();
	if(TestAck()!=RESTART)return 1;
	SendByte(slv_addr);
	Wait();
	if(TestAck()!=MR_SLA_ACK)return 1;
	for (n=0;n<num-1;n++)
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	82 17       	cp	r24, r18
 35c:	93 07       	cpc	r25, r19
 35e:	6c f3       	brlt	.-38     	; 0x33a <PFC8563_Read+0xd0>
		Wait();
		if(TestAck()!=MR_DATA_ACK)return 1;
		*s=TWDR;
		s++;
	}
	rcvNackByte();
 360:	84 e8       	ldi	r24, 0x84	; 132
 362:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 366:	ec eb       	ldi	r30, 0xBC	; 188
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	88 23       	and	r24, r24
 36e:	ec f7       	brge	.-6      	; 0x36a <PFC8563_Read+0x100>
	if(TestAck()!=MR_DATA_NACK)return 1;
 370:	80 91 b9 00 	lds	r24, 0x00B9
 374:	88 7f       	andi	r24, 0xF8	; 248
 376:	88 35       	cpi	r24, 0x58	; 88
 378:	a9 f4       	brne	.+42     	; 0x3a4 <PFC8563_Read+0x13a>
	*s=TWDR;
 37a:	80 91 bb 00 	lds	r24, 0x00BB
 37e:	fa 01       	movw	r30, r20
 380:	80 83       	st	Z, r24
	
	stop();
 382:	84 e9       	ldi	r24, 0x94	; 148
 384:	80 93 bc 00 	sts	0x00BC, r24
	return 0;	
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <PFC8563_Read+0x13c>
uchar PFC8563_Read(uchar slv_addr,uchar suba,uchar *s,uchar num)
{
	uchar n;
	Start();
	Wait();
	if(TestAck()!=START)return 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0b c0       	rjmp	.+22     	; 0x3a6 <PFC8563_Read+0x13c>
	SendByte(slv_addr-1);
	Wait();
	if(TestAck()!=MT_SLA_ACK)return 1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <PFC8563_Read+0x13c>
	SendByte(suba);
	Wait();
	if(TestAck()!=MT_DATA_ACK)return 1;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	07 c0       	rjmp	.+14     	; 0x3a6 <PFC8563_Read+0x13c>
	stop();
	Start();
	Wait();
	if(TestAck()!=RESTART)return 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	05 c0       	rjmp	.+10     	; 0x3a6 <PFC8563_Read+0x13c>
	SendByte(slv_addr);
	Wait();
	if(TestAck()!=MR_SLA_ACK)return 1;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <PFC8563_Read+0x13c>
	for (n=0;n<num-1;n++)
	{
		rcvAckByte();
		Wait();
		if(TestAck()!=MR_DATA_ACK)return 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <PFC8563_Read+0x13c>
		*s=TWDR;
		s++;
	}
	rcvNackByte();
	Wait();
	if(TestAck()!=MR_DATA_NACK)return 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
	*s=TWDR;
	
	stop();
	return 0;	
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	08 95       	ret

000003b4 <Timer1_init>:
void Timer1_init(void)
{
	TCCR1B=0x00;
 3b4:	e1 e8       	ldi	r30, 0x81	; 129
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	10 82       	st	Z, r1
	TCNT1H=0x8F;
 3ba:	8f e8       	ldi	r24, 0x8F	; 143
 3bc:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0x80;
 3c0:	80 e8       	ldi	r24, 0x80	; 128
 3c2:	80 93 84 00 	sts	0x0084, r24
	TCCR1A=0x00;
 3c6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x03;
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	80 83       	st	Z, r24
}
 3ce:	08 95       	ret

000003d0 <__vector_13>:
SIGNAL(TIMER1_OVF_vect)
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	uchar j;
	TCNT1H=0x8F;
 3f2:	8f e8       	ldi	r24, 0x8F	; 143
 3f4:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0x80;
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	80 93 84 00 	sts	0x0084, r24
	if(bit_is_clear(PIND,PD2))
 3fe:	4a 99       	sbic	0x09, 2	; 9
 400:	17 c0       	rjmp	.+46     	; 0x430 <__vector_13+0x60>
	{
		PFC8563_Read(0xA3,0x05,buff,3);
 402:	83 ea       	ldi	r24, 0xA3	; 163
 404:	65 e0       	ldi	r22, 0x05	; 5
 406:	4a e0       	ldi	r20, 0x0A	; 10
 408:	51 e0       	ldi	r21, 0x01	; 1
 40a:	23 e0       	ldi	r18, 0x03	; 3
 40c:	0e 94 35 01 	call	0x26a	; 0x26a <PFC8563_Read>
		j=buff[0];
 410:	80 91 0a 01 	lds	r24, 0x010A
		buff[0]=buff[1]&0x07;   //weeks 
 414:	90 91 0b 01 	lds	r25, 0x010B
 418:	97 70       	andi	r25, 0x07	; 7
 41a:	90 93 0a 01 	sts	0x010A, r25
		buff[1]=j&0x3F;         //date
 41e:	8f 73       	andi	r24, 0x3F	; 63
 420:	80 93 0b 01 	sts	0x010B, r24
		buff[2]&=0x1f;          //months
 424:	80 91 0c 01 	lds	r24, 0x010C
 428:	8f 71       	andi	r24, 0x1F	; 31
 42a:	80 93 0c 01 	sts	0x010C, r24
 42e:	16 c0       	rjmp	.+44     	; 0x45c <__vector_13+0x8c>
	}
	else
	{
		
	
	PFC8563_Read(0xA3,0x02,buff,3);
 430:	83 ea       	ldi	r24, 0xA3	; 163
 432:	62 e0       	ldi	r22, 0x02	; 2
 434:	4a e0       	ldi	r20, 0x0A	; 10
 436:	51 e0       	ldi	r21, 0x01	; 1
 438:	23 e0       	ldi	r18, 0x03	; 3
 43a:	0e 94 35 01 	call	0x26a	; 0x26a <PFC8563_Read>
	buff[0]&=0x7F;
 43e:	80 91 0a 01 	lds	r24, 0x010A
 442:	8f 77       	andi	r24, 0x7F	; 127
 444:	80 93 0a 01 	sts	0x010A, r24
	buff[1]&=0x7F;
 448:	80 91 0b 01 	lds	r24, 0x010B
 44c:	8f 77       	andi	r24, 0x7F	; 127
 44e:	80 93 0b 01 	sts	0x010B, r24
	buff[2]&=0x3F;
 452:	80 91 0c 01 	lds	r24, 0x010C
 456:	8f 73       	andi	r24, 0x3F	; 63
 458:	80 93 0c 01 	sts	0x010C, r24
	}	
	}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <displayNumber>:

void displayNumber(uchar num[])

{
 47e:	fc 01       	movw	r30, r24
	CLR_SHC;
 480:	5b 98       	cbi	0x0b, 3	; 11
			buf[0]&=0x7F; //µ⁄“ª∏ˆ ˝¬Îπ‹–° ˝µ„±Ì æ∞ŸŒª1
		if(temp>1)
			buf[0]|=0x80;//¡Ω∏ˆ ˝¬Îπ‹–° ˝µ„±Ì æ∞ŸŒª2**/
	
	
	SPI_595_T(0x80);
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	8e bd       	out	0x2e, r24	; 46
 486:	0d b4       	in	r0, 0x2d	; 45
 488:	07 fe       	sbrs	r0, 7
 48a:	fd cf       	rjmp	.-6      	; 0x486 <displayNumber+0x8>
	SPI_595_T(g_aDisplayBuf[num[0]&0x0F]);
 48c:	a0 81       	ld	r26, Z
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	af 70       	andi	r26, 0x0F	; 15
 492:	b0 70       	andi	r27, 0x00	; 0
 494:	a0 50       	subi	r26, 0x00	; 0
 496:	bf 4f       	sbci	r27, 0xFF	; 255
 498:	8c 91       	ld	r24, X
 49a:	8e bd       	out	0x2e, r24	; 46
 49c:	0d b4       	in	r0, 0x2d	; 45
 49e:	07 fe       	sbrs	r0, 7
 4a0:	fd cf       	rjmp	.-6      	; 0x49c <displayNumber+0x1e>
	SET_SHC;
 4a2:	5b 9a       	sbi	0x0b, 3	; 11
	CLR_SHC;
 4a4:	5b 98       	cbi	0x0b, 3	; 11
	SPI_595_T(0x40);
 4a6:	80 e4       	ldi	r24, 0x40	; 64
 4a8:	8e bd       	out	0x2e, r24	; 46
 4aa:	0d b4       	in	r0, 0x2d	; 45
 4ac:	07 fe       	sbrs	r0, 7
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <displayNumber+0x2c>
	SPI_595_T(g_aDisplayBuf[num[0]>>4]);
 4b0:	80 81       	ld	r24, Z
 4b2:	82 95       	swap	r24
 4b4:	8f 70       	andi	r24, 0x0F	; 15
 4b6:	a0 e0       	ldi	r26, 0x00	; 0
 4b8:	b1 e0       	ldi	r27, 0x01	; 1
 4ba:	a8 0f       	add	r26, r24
 4bc:	b1 1d       	adc	r27, r1
 4be:	8c 91       	ld	r24, X
 4c0:	8e bd       	out	0x2e, r24	; 46
 4c2:	0d b4       	in	r0, 0x2d	; 45
 4c4:	07 fe       	sbrs	r0, 7
 4c6:	fd cf       	rjmp	.-6      	; 0x4c2 <displayNumber+0x44>
	SET_SHC;
 4c8:	5b 9a       	sbi	0x0b, 3	; 11
	CLR_SHC;
 4ca:	5b 98       	cbi	0x0b, 3	; 11
	SPI_595_T(0x10);
 4cc:	80 e1       	ldi	r24, 0x10	; 16
 4ce:	8e bd       	out	0x2e, r24	; 46
 4d0:	0d b4       	in	r0, 0x2d	; 45
 4d2:	07 fe       	sbrs	r0, 7
 4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <displayNumber+0x52>
	SPI_595_T(g_aDisplayBuf[num[1]&0x0F]);
 4d6:	a1 81       	ldd	r26, Z+1	; 0x01
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	af 70       	andi	r26, 0x0F	; 15
 4dc:	b0 70       	andi	r27, 0x00	; 0
 4de:	a0 50       	subi	r26, 0x00	; 0
 4e0:	bf 4f       	sbci	r27, 0xFF	; 255
 4e2:	8c 91       	ld	r24, X
 4e4:	8e bd       	out	0x2e, r24	; 46
 4e6:	0d b4       	in	r0, 0x2d	; 45
 4e8:	07 fe       	sbrs	r0, 7
 4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <displayNumber+0x68>
	SET_SHC;
 4ec:	5b 9a       	sbi	0x0b, 3	; 11
	CLR_SHC;
 4ee:	5b 98       	cbi	0x0b, 3	; 11
	SPI_595_T(0x08);
 4f0:	88 e0       	ldi	r24, 0x08	; 8
 4f2:	8e bd       	out	0x2e, r24	; 46
 4f4:	0d b4       	in	r0, 0x2d	; 45
 4f6:	07 fe       	sbrs	r0, 7
 4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <displayNumber+0x76>
	SPI_595_T(g_aDisplayBuf[num[1]>>4]);
 4fa:	81 81       	ldd	r24, Z+1	; 0x01
 4fc:	82 95       	swap	r24
 4fe:	8f 70       	andi	r24, 0x0F	; 15
 500:	a0 e0       	ldi	r26, 0x00	; 0
 502:	b1 e0       	ldi	r27, 0x01	; 1
 504:	a8 0f       	add	r26, r24
 506:	b1 1d       	adc	r27, r1
 508:	8c 91       	ld	r24, X
 50a:	8e bd       	out	0x2e, r24	; 46
 50c:	0d b4       	in	r0, 0x2d	; 45
 50e:	07 fe       	sbrs	r0, 7
 510:	fd cf       	rjmp	.-6      	; 0x50c <__stack+0xd>
	SET_SHC;
 512:	5b 9a       	sbi	0x0b, 3	; 11
	CLR_SHC;
 514:	5b 98       	cbi	0x0b, 3	; 11
	SPI_595_T(0x02);
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	8e bd       	out	0x2e, r24	; 46
 51a:	0d b4       	in	r0, 0x2d	; 45
 51c:	07 fe       	sbrs	r0, 7
 51e:	fd cf       	rjmp	.-6      	; 0x51a <__stack+0x1b>
	SPI_595_T(g_aDisplayBuf[num[2]&0x0F]);
 520:	a2 81       	ldd	r26, Z+2	; 0x02
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	af 70       	andi	r26, 0x0F	; 15
 526:	b0 70       	andi	r27, 0x00	; 0
 528:	a0 50       	subi	r26, 0x00	; 0
 52a:	bf 4f       	sbci	r27, 0xFF	; 255
 52c:	8c 91       	ld	r24, X
 52e:	8e bd       	out	0x2e, r24	; 46
 530:	0d b4       	in	r0, 0x2d	; 45
 532:	07 fe       	sbrs	r0, 7
 534:	fd cf       	rjmp	.-6      	; 0x530 <__stack+0x31>
	SET_SHC;
 536:	5b 9a       	sbi	0x0b, 3	; 11
	CLR_SHC;
 538:	5b 98       	cbi	0x0b, 3	; 11
	SPI_595_T(0x01);
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	8e bd       	out	0x2e, r24	; 46
 53e:	0d b4       	in	r0, 0x2d	; 45
 540:	07 fe       	sbrs	r0, 7
 542:	fd cf       	rjmp	.-6      	; 0x53e <__stack+0x3f>
	SPI_595_T(g_aDisplayBuf[num[2]>>4]);
 544:	82 81       	ldd	r24, Z+2	; 0x02
 546:	82 95       	swap	r24
 548:	8f 70       	andi	r24, 0x0F	; 15
 54a:	e0 e0       	ldi	r30, 0x00	; 0
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	e8 0f       	add	r30, r24
 550:	f1 1d       	adc	r31, r1
 552:	80 81       	ld	r24, Z
 554:	8e bd       	out	0x2e, r24	; 46
 556:	0d b4       	in	r0, 0x2d	; 45
 558:	07 fe       	sbrs	r0, 7
 55a:	fd cf       	rjmp	.-6      	; 0x556 <__stack+0x57>
	SET_SHC;
 55c:	5b 9a       	sbi	0x0b, 3	; 11
	
	
	
}
 55e:	08 95       	ret

00000560 <Port_init>:
void Port_init(void)
{
	PORTC=0xff;		DDRC=0x00;
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	88 b9       	out	0x08, r24	; 8
 564:	17 b8       	out	0x07, r1	; 7
	PORTD=0x04;		DDRD=0x0C;
 566:	84 e0       	ldi	r24, 0x04	; 4
 568:	8b b9       	out	0x0b, r24	; 11
 56a:	8c e0       	ldi	r24, 0x0C	; 12
 56c:	8a b9       	out	0x0a, r24	; 10
}
 56e:	08 95       	ret

00000570 <Spi_init>:
void Spi_init(void)
{
	DDRB|=_BV(PB5) | _BV(PB3) | _BV(PB2);
 570:	84 b1       	in	r24, 0x04	; 4
 572:	8c 62       	ori	r24, 0x2C	; 44
 574:	84 b9       	out	0x04, r24	; 4
		SPCR=_BV(SPE) | _BV(MSTR) | _BV(SPR0);
 576:	81 e5       	ldi	r24, 0x51	; 81
 578:	8c bd       	out	0x2c, r24	; 44
			SPSR=0x00;
 57a:	1d bc       	out	0x2d, r1	; 45
}
 57c:	08 95       	ret

0000057e <main>:
int main(void)
{
	Port_init();
 57e:	0e 94 b0 02 	call	0x560	; 0x560 <Port_init>
	Spi_init();
 582:	0e 94 b8 02 	call	0x570	; 0x570 <Spi_init>
	Twi_Init();
 586:	0e 94 53 00 	call	0xa6	; 0xa6 <Twi_Init>
	PFC8563_Write(0xA2,0x00,0x00);
 58a:	82 ea       	ldi	r24, 0xA2	; 162
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	0e 94 59 00 	call	0xb2	; 0xb2 <PFC8563_Write>
	cli();
 594:	f8 94       	cli
	Timer1_init();
 596:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Timer1_init>
	MCUCR=0x00;
 59a:	15 be       	out	0x35, r1	; 53
	//GICR=0x00;
	TIMSK1=0x01;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	80 93 6f 00 	sts	0x006F, r24
	sei();
 5a2:	78 94       	sei
	//UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	//UBRR0L=47;//baud=9600 UBRR=CK/(baud*16) -

    while(1)
    {
	  displayNumber(buff);
 5a4:	ca e0       	ldi	r28, 0x0A	; 10
 5a6:	d1 e0       	ldi	r29, 0x01	; 1
 5a8:	ce 01       	movw	r24, r28
 5aa:	0e 94 3f 02 	call	0x47e	; 0x47e <displayNumber>
 5ae:	fc cf       	rjmp	.-8      	; 0x5a8 <main+0x2a>

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
