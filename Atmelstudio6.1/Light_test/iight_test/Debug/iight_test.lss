
iight_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000186  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c1  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000128  00000000  00000000  00000d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033f  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000be  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003a  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delayMS>:
unsigned char key;

void delayMS(unsigned int ms)
{
	unsigned int i;
	for(i=0;i<ms;i++)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	61 f0       	breq	.+24     	; 0xc2 <delayMS+0x1c>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	46 ed       	ldi	r20, 0xD6	; 214
  b0:	56 e0       	ldi	r21, 0x06	; 6
  b2:	fa 01       	movw	r30, r20
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <delayMS+0xe>
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	28 17       	cp	r18, r24
  be:	39 07       	cpc	r19, r25
  c0:	c1 f7       	brne	.-16     	; 0xb2 <delayMS+0xc>
  c2:	08 95       	ret

000000c4 <main>:
int main(void)
{
	unsigned char i;
	
	
	PORTB=0x00;
  c4:	15 b8       	out	0x05, r1	; 5
	DDRB=0x01;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	84 b9       	out	0x04, r24	; 4
	DDRC=0x00;
  ca:	17 b8       	out	0x07, r1	; 7
	PORTC=0x08;
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	88 b9       	out	0x08, r24	; 8
						
		i=key%2;
		switch(i)
		{
			case 0:PORTB=0x00;break;
			case 1:PORTB=0x01;break;
  d0:	c1 e0       	ldi	r28, 0x01	; 1
    while(1)
    {
        while(1)
		{

		if(KEY_IN)
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	88 70       	andi	r24, 0x08	; 8
  d6:	86 b9       	out	0x06, r24	; 6
  d8:	88 23       	and	r24, r24
  da:	21 f4       	brne	.+8      	; 0xe4 <main+0x20>
		
			delayMS(5);
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <delayMS>
				if(KEY_IN)
  e4:	86 b1       	in	r24, 0x06	; 6
  e6:	88 70       	andi	r24, 0x08	; 8
  e8:	86 b9       	out	0x06, r24	; 6
  ea:	88 23       	and	r24, r24
  ec:	91 f7       	brne	.-28     	; 0xd2 <main+0xe>
					{
						key++;
  ee:	80 91 00 01 	lds	r24, 0x0100
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 00 01 	sts	0x0100, r24
							break;
		}
		}
						
		i=key%2;
		switch(i)
  f8:	98 2f       	mov	r25, r24
  fa:	91 70       	andi	r25, 0x01	; 1
  fc:	80 ff       	sbrs	r24, 0
  fe:	03 c0       	rjmp	.+6      	; 0x106 <main+0x42>
 100:	91 30       	cpi	r25, 0x01	; 1
 102:	39 f7       	brne	.-50     	; 0xd2 <main+0xe>
 104:	02 c0       	rjmp	.+4      	; 0x10a <main+0x46>
		{
			case 0:PORTB=0x00;break;
 106:	15 b8       	out	0x05, r1	; 5
 108:	e4 cf       	rjmp	.-56     	; 0xd2 <main+0xe>
			case 1:PORTB=0x01;break;
 10a:	c5 b9       	out	0x05, r28	; 5
 10c:	e2 cf       	rjmp	.-60     	; 0xd2 <main+0xe>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
