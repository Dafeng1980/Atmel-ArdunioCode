
Gcc_MT41T100.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00001706  0000179a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001706  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080022e  0080022e  000018c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2d  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039f  00000000  00000000  00002619  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bf  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000348  00000000  00000000  00002e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032c  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c5a  00000000  00000000  000034ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004146  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_9>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 bc 03 	jmp	0x778	; 0x778 <__vector_16>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d4 e0       	ldi	r29, 0x04	; 4
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	12 e0       	ldi	r17, 0x02	; 2
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e6 e0       	ldi	r30, 0x06	; 6
      88:	f7 e1       	ldi	r31, 0x17	; 23
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	ae 32       	cpi	r26, 0x2E	; 46
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	22 e0       	ldi	r18, 0x02	; 2
      98:	ae e2       	ldi	r26, 0x2E	; 46
      9a:	b2 e0       	ldi	r27, 0x02	; 2
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	ae 33       	cpi	r26, 0x3E	; 62
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
      aa:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <uart_putch>:
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		 // enable Rx & Tx
	UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	        // config USART; 8N1
}
int uart_putch(char ch,FILE *stream)
{
      b2:	cf 93       	push	r28
      b4:	c8 2f       	mov	r28, r24
	if (ch == '\n')
      b6:	8a 30       	cpi	r24, 0x0A	; 10
      b8:	19 f4       	brne	.+6      	; 0xc0 <uart_putch+0xe>
	uart_putch('\r', stream);
      ba:	8d e0       	ldi	r24, 0x0D	; 13
      bc:	0e 94 59 00 	call	0xb2	; 0xb2 <uart_putch>
	while (!(UCSR0A & (1<<UDRE0)));
      c0:	e0 ec       	ldi	r30, 0xC0	; 192
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	90 81       	ld	r25, Z
      c6:	95 ff       	sbrs	r25, 5
      c8:	fd cf       	rjmp	.-6      	; 0xc4 <uart_putch+0x12>
	UDR0=ch;
      ca:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <uart_getch>:
int uart_getch(FILE *stream)
{
      d6:	cf 93       	push	r28
      d8:	bc 01       	movw	r22, r24
	unsigned char ch;
	while (!(UCSR0A & (1<<RXC0)));
      da:	e0 ec       	ldi	r30, 0xC0	; 192
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	88 23       	and	r24, r24
      e2:	ec f7       	brge	.-6      	; 0xde <uart_getch+0x8>
	ch=UDR0;
      e4:	c0 91 c6 00 	lds	r28, 0x00C6

	// Echo the Output Back to terminal //
	uart_putch(ch,stream);
      e8:	8c 2f       	mov	r24, r28
      ea:	0e 94 59 00 	call	0xb2	; 0xb2 <uart_putch>

	return ch;
}
      ee:	8c 2f       	mov	r24, r28
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	cf 91       	pop	r28
      f4:	08 95       	ret

000000f6 <uart_init>:
 unsigned char g_aDisplayBuf[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
	 char h;

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
      f6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
      fa:	8b e0       	ldi	r24, 0x0B	; 11
      fc:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		 // enable Rx & Tx
     100:	88 e1       	ldi	r24, 0x18	; 24
     102:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	        // config USART; 8N1
     106:	86 e0       	ldi	r24, 0x06	; 6
     108:	80 93 c2 00 	sts	0x00C2, r24
     10c:	08 95       	ret

0000010e <ansi_cl>:
	uart_putch(ch,stream);

	return ch;
}
void ansi_cl(void)
{
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	// ANSI clear screen: cl=\E[H\E[J
	putchar(27);
     112:	ca e3       	ldi	r28, 0x3A	; 58
     114:	d2 e0       	ldi	r29, 0x02	; 2
     116:	68 81       	ld	r22, Y
     118:	79 81       	ldd	r23, Y+1	; 0x01
     11a:	8b e1       	ldi	r24, 0x1B	; 27
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar('[');
     122:	68 81       	ld	r22, Y
     124:	79 81       	ldd	r23, Y+1	; 0x01
     126:	8b e5       	ldi	r24, 0x5B	; 91
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar('H');
     12e:	68 81       	ld	r22, Y
     130:	79 81       	ldd	r23, Y+1	; 0x01
     132:	88 e4       	ldi	r24, 0x48	; 72
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar(27);
     13a:	68 81       	ld	r22, Y
     13c:	79 81       	ldd	r23, Y+1	; 0x01
     13e:	8b e1       	ldi	r24, 0x1B	; 27
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar('[');
     146:	68 81       	ld	r22, Y
     148:	79 81       	ldd	r23, Y+1	; 0x01
     14a:	8b e5       	ldi	r24, 0x5B	; 91
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar('J');
     152:	68 81       	ld	r22, Y
     154:	79 81       	ldd	r23, Y+1	; 0x01
     156:	8a e4       	ldi	r24, 0x4A	; 74
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
}
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <ansi_me>:
void ansi_me(void)
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
     168:	ca e3       	ldi	r28, 0x3A	; 58
     16a:	d2 e0       	ldi	r29, 0x02	; 2
     16c:	68 81       	ld	r22, Y
     16e:	79 81       	ldd	r23, Y+1	; 0x01
     170:	8b e1       	ldi	r24, 0x1B	; 27
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar('[');
     178:	68 81       	ld	r22, Y
     17a:	79 81       	ldd	r23, Y+1	; 0x01
     17c:	8b e5       	ldi	r24, 0x5B	; 91
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar('0');
     184:	68 81       	ld	r22, Y
     186:	79 81       	ldd	r23, Y+1	; 0x01
     188:	80 e3       	ldi	r24, 0x30	; 48
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar('m');
     190:	68 81       	ld	r22, Y
     192:	79 81       	ldd	r23, Y+1	; 0x01
     194:	8d e6       	ldi	r24, 0x6D	; 109
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <ansi_cm>:
void ansi_cm(unsigned char row,unsigned char col)
{
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	18 2f       	mov	r17, r24
     1ae:	f6 2e       	mov	r15, r22
	// ANSI cursor movement: cl=\E%row;%colH
	putchar(27);
     1b0:	ca e3       	ldi	r28, 0x3A	; 58
     1b2:	d2 e0       	ldi	r29, 0x02	; 2
     1b4:	68 81       	ld	r22, Y
     1b6:	79 81       	ldd	r23, Y+1	; 0x01
     1b8:	8b e1       	ldi	r24, 0x1B	; 27
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	putchar('[');
     1c0:	68 81       	ld	r22, Y
     1c2:	79 81       	ldd	r23, Y+1	; 0x01
     1c4:	8b e5       	ldi	r24, 0x5B	; 91
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	printf("%d",row);
     1cc:	1f 92       	push	r1
     1ce:	1f 93       	push	r17
     1d0:	08 e1       	ldi	r16, 0x18	; 24
     1d2:	11 e0       	ldi	r17, 0x01	; 1
     1d4:	1f 93       	push	r17
     1d6:	0f 93       	push	r16
     1d8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
	putchar(';');
     1dc:	68 81       	ld	r22, Y
     1de:	79 81       	ldd	r23, Y+1	; 0x01
     1e0:	8b e3       	ldi	r24, 0x3B	; 59
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
	printf("%d",col);
     1e8:	1f 92       	push	r1
     1ea:	ff 92       	push	r15
     1ec:	1f 93       	push	r17
     1ee:	0f 93       	push	r16
     1f0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
	putchar('H');
     1f4:	68 81       	ld	r22, Y
     1f6:	79 81       	ldd	r23, Y+1	; 0x01
     1f8:	88 e4       	ldi	r24, 0x48	; 72
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     200:	8d b7       	in	r24, 0x3d	; 61
     202:	9e b7       	in	r25, 0x3e	; 62
     204:	08 96       	adiw	r24, 0x08	; 8
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	9e bf       	out	0x3e, r25	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	8d bf       	out	0x3d, r24	; 61
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	08 95       	ret

0000021c <i2c_transmit>:
/* START I2C Routine */
unsigned char i2c_transmit(unsigned char type) {
	switch(type) {
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	51 f0       	breq	.+20     	; 0x234 <i2c_transmit+0x18>
     220:	28 f0       	brcs	.+10     	; 0x22c <i2c_transmit+0x10>
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	59 f0       	breq	.+22     	; 0x23c <i2c_transmit+0x20>
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	69 f0       	breq	.+26     	; 0x244 <i2c_transmit+0x28>
     22a:	11 c0       	rjmp	.+34     	; 0x24e <i2c_transmit+0x32>
		case I2C_START:    // Send Start Condition
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     22c:	84 ea       	ldi	r24, 0xA4	; 164
     22e:	80 93 bc 00 	sts	0x00BC, r24
		break;
     232:	0d c0       	rjmp	.+26     	; 0x24e <i2c_transmit+0x32>
		case I2C_DATA:     // Send Data with No-Acknowledge
		TWCR = (1 << TWINT) | (1 << TWEN);
     234:	84 e8       	ldi	r24, 0x84	; 132
     236:	80 93 bc 00 	sts	0x00BC, r24
		break;
     23a:	09 c0       	rjmp	.+18     	; 0x24e <i2c_transmit+0x32>
		case I2C_DATA_ACK: // Send Data with Acknowledge
		TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN);
     23c:	84 ec       	ldi	r24, 0xC4	; 196
     23e:	80 93 bc 00 	sts	0x00BC, r24
		break;
     242:	05 c0       	rjmp	.+10     	; 0x24e <i2c_transmit+0x32>
		case I2C_STOP:     // Send Stop Condition
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     244:	84 e9       	ldi	r24, 0x94	; 148
     246:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	08 95       	ret
	}
	// Wait for TWINT flag set on Register TWCR
	while (!(TWCR & (1 << TWINT)));
     24e:	ec eb       	ldi	r30, 0xBC	; 188
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	88 23       	and	r24, r24
     256:	ec f7       	brge	.-6      	; 0x252 <i2c_transmit+0x36>
	// Return TWI Status Register, mask the prescaller bits (TWPS1,TWPS0)
	return (TWSR & 0xF8);
     258:	80 91 b9 00 	lds	r24, 0x00B9
     25c:	88 7f       	andi	r24, 0xF8	; 248
}
     25e:	08 95       	ret

00000260 <i2c_start>:
char i2c_start(unsigned int dev_id, unsigned int dev_addr, unsigned char rw_type)
{
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	12 e3       	ldi	r17, 0x32	; 50

	// Check the TWI Status
	if (twi_status == TW_MT_ARB_LOST) goto i2c_retry;
	if ((twi_status != TW_START) && (twi_status != TW_REP_START)) goto i2c_quit;
	// Send slave address (SLA_W)
	TWDR = (dev_id & 0xF0) | (dev_addr & 0x07) | rw_type;
     26a:	67 70       	andi	r22, 0x07	; 7
     26c:	64 2b       	or	r22, r20
     26e:	80 7f       	andi	r24, 0xF0	; 240
     270:	06 2f       	mov	r16, r22
     272:	08 2b       	or	r16, r24
     274:	cb eb       	ldi	r28, 0xBB	; 187
     276:	d0 e0       	ldi	r29, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <i2c_start+0x1e>
     27a:	11 50       	subi	r17, 0x01	; 1
{
	unsigned char n = 0;
	unsigned char twi_status;
	char r_val = -1;
	i2c_retry:
	if (n++ >= MAX_TRIES) return r_val;
     27c:	c1 f0       	breq	.+48     	; 0x2ae <i2c_start+0x4e>
	// Transmit Start Condition
	twi_status=i2c_transmit(I2C_START);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_transmit>

	// Check the TWI Status
	if (twi_status == TW_MT_ARB_LOST) goto i2c_retry;
     284:	88 33       	cpi	r24, 0x38	; 56
     286:	c9 f3       	breq	.-14     	; 0x27a <i2c_start+0x1a>
	if ((twi_status != TW_START) && (twi_status != TW_REP_START)) goto i2c_quit;
     288:	88 30       	cpi	r24, 0x08	; 8
     28a:	11 f0       	breq	.+4      	; 0x290 <i2c_start+0x30>
     28c:	80 31       	cpi	r24, 0x10	; 16
     28e:	89 f4       	brne	.+34     	; 0x2b2 <i2c_start+0x52>
	// Send slave address (SLA_W)
	TWDR = (dev_id & 0xF0) | (dev_addr & 0x07) | rw_type;
     290:	08 83       	st	Y, r16
	// Transmit I2C Data
	twi_status=i2c_transmit(I2C_DATA);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_transmit>
	// Check the TWSR status
	if ((twi_status == TW_MT_SLA_NACK) || (twi_status == TW_MT_ARB_LOST)) goto i2c_retry;
     298:	80 32       	cpi	r24, 0x20	; 32
     29a:	79 f3       	breq	.-34     	; 0x27a <i2c_start+0x1a>
     29c:	88 33       	cpi	r24, 0x38	; 56
     29e:	69 f3       	breq	.-38     	; 0x27a <i2c_start+0x1a>
	if (twi_status != TW_MT_SLA_ACK) goto i2c_quit;
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	88 31       	cpi	r24, 0x18	; 24
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <i2c_start+0x48>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	89 2f       	mov	r24, r25
     2aa:	81 95       	neg	r24
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <i2c_start+0x54>
{
	unsigned char n = 0;
	unsigned char twi_status;
	char r_val = -1;
	i2c_retry:
	if (n++ >= MAX_TRIES) return r_val;
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <i2c_start+0x54>
}
char i2c_start(unsigned int dev_id, unsigned int dev_addr, unsigned char rw_type)
{
	unsigned char n = 0;
	unsigned char twi_status;
	char r_val = -1;
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
	if ((twi_status == TW_MT_SLA_NACK) || (twi_status == TW_MT_ARB_LOST)) goto i2c_retry;
	if (twi_status != TW_MT_SLA_ACK) goto i2c_quit;
	r_val=0;
	i2c_quit:
	return r_val;
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <i2c_stop>:
void i2c_stop(void)
{
	 unsigned char twi_status;
	// Transmit I2C Data
	twi_status = i2c_transmit(I2C_STOP);
     2be:	83 e0       	ldi	r24, 0x03	; 3
     2c0:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_transmit>
     2c4:	08 95       	ret

000002c6 <i2c_write>:
char i2c_write(char data)
{
	unsigned char twi_status;
	char r_val = -1;
	// Send the Data to I2C Bus
	TWDR = data;
     2c6:	80 93 bb 00 	sts	0x00BB, r24
	// Transmit I2C Data
	twi_status=i2c_transmit(I2C_DATA);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_transmit>
	// Check the TWSR status
	if (twi_status != TW_MT_DATA_ACK) goto i2c_quit;
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	88 32       	cpi	r24, 0x28	; 40
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <i2c_write+0x12>
     2d6:	90 e0       	ldi	r25, 0x00	; 0
	r_val=0;
	i2c_quit:
	return r_val;
}
     2d8:	89 2f       	mov	r24, r25
     2da:	81 95       	neg	r24
     2dc:	08 95       	ret

000002de <i2c_read>:
char i2c_read(char *data,char ack_type)
{
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	ec 01       	movw	r28, r24
	unsigned char twi_status;
	char r_val = -1;

	if (ack_type) {
     2e4:	66 23       	and	r22, r22
     2e6:	31 f0       	breq	.+12     	; 0x2f4 <i2c_read+0x16>
		// Read I2C Data and Send Acknowledge
		twi_status=i2c_transmit(I2C_DATA_ACK);
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_transmit>
		if (twi_status != TW_MR_DATA_ACK) goto i2c_quit;
     2ee:	80 35       	cpi	r24, 0x50	; 80
     2f0:	59 f4       	brne	.+22     	; 0x308 <i2c_read+0x2a>
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <i2c_read+0x20>
		} else {
		// Read I2C Data and Send No Acknowledge
		twi_status=i2c_transmit(I2C_DATA);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_transmit>
		if (twi_status != TW_MR_DATA_NACK) goto i2c_quit;
     2fa:	88 35       	cpi	r24, 0x58	; 88
     2fc:	39 f4       	brne	.+14     	; 0x30c <i2c_read+0x2e>
	}
	// Get the Data
	*data=TWDR;
     2fe:	80 91 bb 00 	lds	r24, 0x00BB
     302:	88 83       	st	Y, r24
	r_val=0;
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	03 c0       	rjmp	.+6      	; 0x30e <i2c_read+0x30>
	return r_val;
}
char i2c_read(char *data,char ack_type)
{
	unsigned char twi_status;
	char r_val = -1;
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	01 c0       	rjmp	.+2      	; 0x30e <i2c_read+0x30>
     30c:	8f ef       	ldi	r24, 0xFF	; 255
	// Get the Data
	*data=TWDR;
	r_val=0;
	i2c_quit:
	return r_val;
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <dec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char dec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     314:	9d ec       	ldi	r25, 0xCD	; 205
     316:	89 9f       	mul	r24, r25
     318:	91 2d       	mov	r25, r1
     31a:	11 24       	eor	r1, r1
     31c:	96 95       	lsr	r25
     31e:	96 95       	lsr	r25
     320:	96 95       	lsr	r25
     322:	29 2f       	mov	r18, r25
     324:	22 0f       	add	r18, r18
     326:	32 2f       	mov	r19, r18
     328:	33 0f       	add	r19, r19
     32a:	33 0f       	add	r19, r19
     32c:	23 0f       	add	r18, r19
     32e:	82 1b       	sub	r24, r18
}
     330:	20 e1       	ldi	r18, 0x10	; 16
     332:	92 9f       	mul	r25, r18
     334:	80 0d       	add	r24, r0
     336:	11 24       	eor	r1, r1
     338:	08 95       	ret

0000033a <Read_M41T00>:
{
	return ((num/16 * 10) + (num % 16));
}
***/
void Read_M41T00(void)
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	1f 92       	push	r1
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
	char data;
	// First we initial the pointer register to address 0x00
	// Start the I2C Write Transmission
	i2c_start(MT41T100_ID,MT41T100_ADDR,TW_WRITE);
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 ed       	ldi	r24, 0xD0	; 208
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 30 01 	call	0x260	; 0x260 <i2c_start>
	// Start from Address 0x00
	i2c_write(0x00);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 63 01 	call	0x2c6	; 0x2c6 <i2c_write>
	// Stop I2C Transmission
	i2c_stop();
     358:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_stop>

	// Start the I2C Read Transmission
	i2c_start(MT41T100_ID,MT41T100_ADDR,TW_READ);
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	80 ed       	ldi	r24, 0xD0	; 208
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 30 01 	call	0x260	; 0x260 <i2c_start>
	// Read the Second Register, Send Master Acknowledge
	i2c_read(&data,ACK);
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	ce 01       	movw	r24, r28
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
	M41T00_addr[0]=data & 0x7F;
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	8f 77       	andi	r24, 0x7F	; 127
     378:	80 93 2e 02 	sts	0x022E, r24
	// Read the Minute Register, Send Master Acknowledge
	i2c_read(&data,ACK);
     37c:	61 e0       	ldi	r22, 0x01	; 1
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
	M41T00_addr[1]=data & 0x7F;
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	8f 77       	andi	r24, 0x7F	; 127
     38a:	80 93 2f 02 	sts	0x022F, r24
	// Read the Hour Register, Send Master Acknowledge
	i2c_read(&data,ACK);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	ce 01       	movw	r24, r28
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
		ampm_mode=(data & 0x20) >> 5;   // ampm_mode: 0-AM, 1-PM
		ds1307_addr[2]=bcd2dec(data & 0x1F);
		} else {
		hour_mode = HOUR_24;
		ampm_mode=0;**/
		M41T00_addr[2]=data & 0x3F;
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	8f 73       	andi	r24, 0x3F	; 63
     39c:	80 93 30 02 	sts	0x0230, r24
	
	// Read the Day of Week Register, Send Master Acknowledge
	i2c_read(&data,ACK);
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
	M41T00_addr[3]=data & 0x07;
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	87 70       	andi	r24, 0x07	; 7
     3ae:	80 93 31 02 	sts	0x0231, r24
	// Read the Day of Month Register, Send Master Acknowledge
	i2c_read(&data,ACK);
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	ce 01       	movw	r24, r28
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
	M41T00_addr[4]=data & 0x3F;
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	8f 73       	andi	r24, 0x3F	; 63
     3c0:	80 93 32 02 	sts	0x0232, r24
	// Read the Month Register, Send Master Acknowledge
	i2c_read(&data,ACK);
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	ce 01       	movw	r24, r28
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
	M41T00_addr[5]=data & 0x1F;
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	8f 71       	andi	r24, 0x1F	; 31
     3d2:	80 93 33 02 	sts	0x0233, r24
	// Read the Year Register, Send Master No Acknowledge
	i2c_read(&data,NACK);
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
	M41T00_addr[6]=data;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	80 93 34 02 	sts	0x0234, r24
	// Stop I2C Transmission
	i2c_stop();
     3e6:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_stop>
}
     3ea:	0f 90       	pop	r0
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <Read_TMP112>:
void Read_TMP112(void)
{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	1f 92       	push	r1
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
	char data;
	i2c_start(TMP112_ID,TMP112_ADDR,TW_WRITE);
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	62 e0       	ldi	r22, 0x02	; 2
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e9       	ldi	r24, 0x90	; 144
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 30 01 	call	0x260	; 0x260 <i2c_start>
	i2c_write(0x00);
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <i2c_write>
	i2c_stop();
     410:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_stop>
	i2c_start(TMP112_ID,TMP112_ADDR,TW_READ);
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	80 e9       	ldi	r24, 0x90	; 144
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 30 01 	call	0x260	; 0x260 <i2c_start>
	i2c_read(&data,ACK);
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	ce 01       	movw	r24, r28
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
	M41T00_addr[7]=dec2bcd(data);
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	0e 94 8a 01 	call	0x314	; 0x314 <dec2bcd>
     432:	80 93 35 02 	sts	0x0235, r24
	i2c_read(&data,ACK);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	ce 01       	movw	r24, r28
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read>
	M41T00_addr[8]=(data>>4);
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	82 95       	swap	r24
     444:	8f 70       	andi	r24, 0x0F	; 15
     446:	80 93 36 02 	sts	0x0236, r24
	i2c_stop();
     44a:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_stop>
	
	
	
}
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <Write_M41T00>:
void Write_M41T00(void)
{
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
	unsigned char i;
	// Make sure we enable the Oscillator control bit CH=0 on Register 0x00
	M41T00_addr[0]=M41T00_addr[0] & 0x7F;
     45e:	ee e2       	ldi	r30, 0x2E	; 46
     460:	f2 e0       	ldi	r31, 0x02	; 2
     462:	80 81       	ld	r24, Z
     464:	8f 77       	andi	r24, 0x7F	; 127
     466:	80 83       	st	Z, r24
	// Start the I2C Write Transmission
	i2c_start(MT41T100_ID,MT41T100_ADDR,TW_WRITE);
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 ed       	ldi	r24, 0xD0	; 208
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 30 01 	call	0x260	; 0x260 <i2c_start>
	// Start from Address 0x00
	i2c_write(0x00);
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 63 01 	call	0x2c6	; 0x2c6 <i2c_write>
     47c:	ce e2       	ldi	r28, 0x2E	; 46
     47e:	d2 e0       	ldi	r29, 0x02	; 2
     480:	05 e3       	ldi	r16, 0x35	; 53
     482:	12 e0       	ldi	r17, 0x02	; 2
	// Write the data to the MT41T100 address start at 0x00
	// MT41T100 automatically will increase the Address.
	for (i=0; i<7; i++) {
			i2c_write(dec2bcd(M41T00_addr[i]));
     484:	89 91       	ld	r24, Y+
     486:	0e 94 8a 01 	call	0x314	; 0x314 <dec2bcd>
     48a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <i2c_write>
	i2c_start(MT41T100_ID,MT41T100_ADDR,TW_WRITE);
	// Start from Address 0x00
	i2c_write(0x00);
	// Write the data to the MT41T100 address start at 0x00
	// MT41T100 automatically will increase the Address.
	for (i=0; i<7; i++) {
     48e:	c0 17       	cp	r28, r16
     490:	d1 07       	cpc	r29, r17
     492:	c1 f7       	brne	.-16     	; 0x484 <Write_M41T00+0x2e>
			i2c_write(dec2bcd(M41T00_addr[i]));
		}
	
	// Stop I2C Transmission
	i2c_stop();
     494:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_stop>
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <getnumber>:
	sdigit[0]=digit;                 // Put the Second digit
	sdigit[1]='0' + number;
	return sdigit;
}*/
char getnumber(unsigned char min, unsigned char max)
{
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <getnumber+0xa>
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	18 2f       	mov	r17, r24
     4b2:	06 2f       	mov	r16, r22
	int inumber;
	scanf("%d",&inumber);
     4b4:	9e 01       	movw	r18, r28
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	3f 93       	push	r19
     4bc:	2f 93       	push	r18
     4be:	28 e1       	ldi	r18, 0x18	; 24
     4c0:	31 e0       	ldi	r19, 0x01	; 1
     4c2:	3f 93       	push	r19
     4c4:	2f 93       	push	r18
     4c6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <scanf>
	if (inumber < min || inumber > max) {
     4ca:	41 2f       	mov	r20, r17
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	29 81       	ldd	r18, Y+1	; 0x01
     4d0:	3a 81       	ldd	r19, Y+2	; 0x02
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	24 17       	cp	r18, r20
     4dc:	35 07       	cpc	r19, r21
     4de:	2c f0       	brlt	.+10     	; 0x4ea <getnumber+0x48>
     4e0:	40 2f       	mov	r20, r16
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	42 17       	cp	r20, r18
     4e6:	53 07       	cpc	r21, r19
     4e8:	dc f4       	brge	.+54     	; 0x520 <__stack+0x21>
		printf("\n\nInvalid [%d to %d]!",min,max);
     4ea:	1f 92       	push	r1
     4ec:	0f 93       	push	r16
     4ee:	1f 92       	push	r1
     4f0:	1f 93       	push	r17
     4f2:	8b e1       	ldi	r24, 0x1B	; 27
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	8f e3       	ldi	r24, 0x3F	; 63
     502:	9b e0       	ldi	r25, 0x0B	; 11
     504:	21 50       	subi	r18, 0x01	; 1
     506:	80 40       	sbci	r24, 0x00	; 0
     508:	90 40       	sbci	r25, 0x00	; 0
     50a:	e1 f7       	brne	.-8      	; 0x504 <__stack+0x5>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <__stack+0xf>
     50e:	00 00       	nop
		_delay_ms(500);
		return -1;
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	8f ef       	ldi	r24, 0xFF	; 255
     51e:	01 c0       	rjmp	.+2      	; 0x522 <__stack+0x23>
	}
	return inumber;
     520:	82 2f       	mov	r24, r18
}
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <displayNumber>:


void displayNumber(unsigned char num[], unsigned char i)
{
     530:	fc 01       	movw	r30, r24
	if (i==2)
     532:	62 30       	cpi	r22, 0x02	; 2
     534:	09 f0       	breq	.+2      	; 0x538 <displayNumber+0x8>
     536:	47 c0       	rjmp	.+142    	; 0x5c6 <displayNumber+0x96>
	{
		CLR_SHC;
     538:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x10);
     53a:	80 e1       	ldi	r24, 0x10	; 16
     53c:	8e bd       	out	0x2e, r24	; 46
     53e:	0d b4       	in	r0, 0x2d	; 45
     540:	07 fe       	sbrs	r0, 7
     542:	fd cf       	rjmp	.-6      	; 0x53e <displayNumber+0xe>
		SPI_595_T(g_aDisplayBuf[num[7]>>4]);
     544:	a7 81       	ldd	r26, Z+7	; 0x07
     546:	a2 95       	swap	r26
     548:	af 70       	andi	r26, 0x0F	; 15
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	a2 5f       	subi	r26, 0xF2	; 242
     54e:	be 4f       	sbci	r27, 0xFE	; 254
     550:	8c 91       	ld	r24, X
     552:	8e bd       	out	0x2e, r24	; 46
     554:	0d b4       	in	r0, 0x2d	; 45
     556:	07 fe       	sbrs	r0, 7
     558:	fd cf       	rjmp	.-6      	; 0x554 <displayNumber+0x24>
		SET_SHC;
     55a:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     55c:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x20);
     55e:	80 e2       	ldi	r24, 0x20	; 32
     560:	8e bd       	out	0x2e, r24	; 46
     562:	0d b4       	in	r0, 0x2d	; 45
     564:	07 fe       	sbrs	r0, 7
     566:	fd cf       	rjmp	.-6      	; 0x562 <displayNumber+0x32>
		SPI_595_T(g_aDisplayBuf[(num[7]&0x0F)]);
     568:	a7 81       	ldd	r26, Z+7	; 0x07
     56a:	af 70       	andi	r26, 0x0F	; 15
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	a2 5f       	subi	r26, 0xF2	; 242
     570:	be 4f       	sbci	r27, 0xFE	; 254
     572:	8c 91       	ld	r24, X
     574:	8e bd       	out	0x2e, r24	; 46
     576:	0d b4       	in	r0, 0x2d	; 45
     578:	07 fe       	sbrs	r0, 7
     57a:	fd cf       	rjmp	.-6      	; 0x576 <displayNumber+0x46>
		SET_SHC;
     57c:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     57e:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x80);
     580:	80 e8       	ldi	r24, 0x80	; 128
     582:	8e bd       	out	0x2e, r24	; 46
     584:	0d b4       	in	r0, 0x2d	; 45
     586:	07 fe       	sbrs	r0, 7
     588:	fd cf       	rjmp	.-6      	; 0x584 <displayNumber+0x54>
		SPI_595_T(g_aDisplayBuf[num[8]*10/16]);
     58a:	80 85       	ldd	r24, Z+8	; 0x08
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	fc 01       	movw	r30, r24
     590:	ee 0f       	add	r30, r30
     592:	ff 1f       	adc	r31, r31
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	e8 0f       	add	r30, r24
     5a2:	f9 1f       	adc	r31, r25
     5a4:	f5 95       	asr	r31
     5a6:	e7 95       	ror	r30
     5a8:	f5 95       	asr	r31
     5aa:	e7 95       	ror	r30
     5ac:	f5 95       	asr	r31
     5ae:	e7 95       	ror	r30
     5b0:	f5 95       	asr	r31
     5b2:	e7 95       	ror	r30
     5b4:	e2 5f       	subi	r30, 0xF2	; 242
     5b6:	fe 4f       	sbci	r31, 0xFE	; 254
     5b8:	80 81       	ld	r24, Z
     5ba:	8e bd       	out	0x2e, r24	; 46
     5bc:	0d b4       	in	r0, 0x2d	; 45
     5be:	07 fe       	sbrs	r0, 7
     5c0:	fd cf       	rjmp	.-6      	; 0x5bc <displayNumber+0x8c>
		SET_SHC;
     5c2:	5b 9a       	sbi	0x0b, 3	; 11
     5c4:	08 95       	ret
	}
	if(i==0)
     5c6:	61 11       	cpse	r22, r1
     5c8:	6a c0       	rjmp	.+212    	; 0x69e <displayNumber+0x16e>
	{
		CLR_SHC;
     5ca:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x80);
     5cc:	80 e8       	ldi	r24, 0x80	; 128
     5ce:	8e bd       	out	0x2e, r24	; 46
     5d0:	0d b4       	in	r0, 0x2d	; 45
     5d2:	07 fe       	sbrs	r0, 7
     5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <displayNumber+0xa0>
		SPI_595_T(g_aDisplayBuf[num[3]&0x0F]);
     5d6:	a3 81       	ldd	r26, Z+3	; 0x03
     5d8:	af 70       	andi	r26, 0x0F	; 15
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	a2 5f       	subi	r26, 0xF2	; 242
     5de:	be 4f       	sbci	r27, 0xFE	; 254
     5e0:	8c 91       	ld	r24, X
     5e2:	8e bd       	out	0x2e, r24	; 46
     5e4:	0d b4       	in	r0, 0x2d	; 45
     5e6:	07 fe       	sbrs	r0, 7
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <displayNumber+0xb4>
		SET_SHC;
     5ea:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     5ec:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x40);
     5ee:	80 e4       	ldi	r24, 0x40	; 64
     5f0:	8e bd       	out	0x2e, r24	; 46
     5f2:	0d b4       	in	r0, 0x2d	; 45
     5f4:	07 fe       	sbrs	r0, 7
     5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <displayNumber+0xc2>
		SPI_595_T(g_aDisplayBuf[num[3]>>4]);
     5f8:	a3 81       	ldd	r26, Z+3	; 0x03
     5fa:	a2 95       	swap	r26
     5fc:	af 70       	andi	r26, 0x0F	; 15
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	a2 5f       	subi	r26, 0xF2	; 242
     602:	be 4f       	sbci	r27, 0xFE	; 254
     604:	8c 91       	ld	r24, X
     606:	8e bd       	out	0x2e, r24	; 46
     608:	0d b4       	in	r0, 0x2d	; 45
     60a:	07 fe       	sbrs	r0, 7
     60c:	fd cf       	rjmp	.-6      	; 0x608 <displayNumber+0xd8>
		SET_SHC;
     60e:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     610:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x10);
     612:	80 e1       	ldi	r24, 0x10	; 16
     614:	8e bd       	out	0x2e, r24	; 46
     616:	0d b4       	in	r0, 0x2d	; 45
     618:	07 fe       	sbrs	r0, 7
     61a:	fd cf       	rjmp	.-6      	; 0x616 <displayNumber+0xe6>
		SPI_595_T(g_aDisplayBuf[num[4]&0x0F]);
     61c:	a4 81       	ldd	r26, Z+4	; 0x04
     61e:	af 70       	andi	r26, 0x0F	; 15
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	a2 5f       	subi	r26, 0xF2	; 242
     624:	be 4f       	sbci	r27, 0xFE	; 254
     626:	8c 91       	ld	r24, X
     628:	8e bd       	out	0x2e, r24	; 46
     62a:	0d b4       	in	r0, 0x2d	; 45
     62c:	07 fe       	sbrs	r0, 7
     62e:	fd cf       	rjmp	.-6      	; 0x62a <displayNumber+0xfa>
		SET_SHC;
     630:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     632:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x08);
     634:	88 e0       	ldi	r24, 0x08	; 8
     636:	8e bd       	out	0x2e, r24	; 46
     638:	0d b4       	in	r0, 0x2d	; 45
     63a:	07 fe       	sbrs	r0, 7
     63c:	fd cf       	rjmp	.-6      	; 0x638 <displayNumber+0x108>
		SPI_595_T(g_aDisplayBuf[num[4]>>4]);
     63e:	a4 81       	ldd	r26, Z+4	; 0x04
     640:	a2 95       	swap	r26
     642:	af 70       	andi	r26, 0x0F	; 15
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	a2 5f       	subi	r26, 0xF2	; 242
     648:	be 4f       	sbci	r27, 0xFE	; 254
     64a:	8c 91       	ld	r24, X
     64c:	8e bd       	out	0x2e, r24	; 46
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <displayNumber+0x11e>
		SET_SHC;
     654:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     656:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x02);
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	8e bd       	out	0x2e, r24	; 46
     65c:	0d b4       	in	r0, 0x2d	; 45
     65e:	07 fe       	sbrs	r0, 7
     660:	fd cf       	rjmp	.-6      	; 0x65c <displayNumber+0x12c>
		SPI_595_T(g_aDisplayBuf[num[5]&0x0F]);
     662:	a5 81       	ldd	r26, Z+5	; 0x05
     664:	af 70       	andi	r26, 0x0F	; 15
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	a2 5f       	subi	r26, 0xF2	; 242
     66a:	be 4f       	sbci	r27, 0xFE	; 254
     66c:	8c 91       	ld	r24, X
     66e:	8e bd       	out	0x2e, r24	; 46
     670:	0d b4       	in	r0, 0x2d	; 45
     672:	07 fe       	sbrs	r0, 7
     674:	fd cf       	rjmp	.-6      	; 0x670 <displayNumber+0x140>
		SET_SHC;
     676:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     678:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x01);
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	8e bd       	out	0x2e, r24	; 46
     67e:	0d b4       	in	r0, 0x2d	; 45
     680:	07 fe       	sbrs	r0, 7
     682:	fd cf       	rjmp	.-6      	; 0x67e <displayNumber+0x14e>
		SPI_595_T(g_aDisplayBuf[num[5]>>4]);
     684:	e5 81       	ldd	r30, Z+5	; 0x05
     686:	e2 95       	swap	r30
     688:	ef 70       	andi	r30, 0x0F	; 15
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	e2 5f       	subi	r30, 0xF2	; 242
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	80 81       	ld	r24, Z
     692:	8e bd       	out	0x2e, r24	; 46
     694:	0d b4       	in	r0, 0x2d	; 45
     696:	07 fe       	sbrs	r0, 7
     698:	fd cf       	rjmp	.-6      	; 0x694 <displayNumber+0x164>
		SET_SHC;
     69a:	5b 9a       	sbi	0x0b, 3	; 11
     69c:	08 95       	ret
	}
	if(i==1)
     69e:	61 30       	cpi	r22, 0x01	; 1
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <displayNumber+0x174>
     6a2:	69 c0       	rjmp	.+210    	; 0x776 <displayNumber+0x246>
	{
		CLR_SHC;
     6a4:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x80);
     6a6:	80 e8       	ldi	r24, 0x80	; 128
     6a8:	8e bd       	out	0x2e, r24	; 46
     6aa:	0d b4       	in	r0, 0x2d	; 45
     6ac:	07 fe       	sbrs	r0, 7
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <displayNumber+0x17a>
		SPI_595_T(g_aDisplayBuf[num[0]&0x0F]);
     6b0:	a0 81       	ld	r26, Z
     6b2:	af 70       	andi	r26, 0x0F	; 15
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	a2 5f       	subi	r26, 0xF2	; 242
     6b8:	be 4f       	sbci	r27, 0xFE	; 254
     6ba:	8c 91       	ld	r24, X
     6bc:	8e bd       	out	0x2e, r24	; 46
     6be:	0d b4       	in	r0, 0x2d	; 45
     6c0:	07 fe       	sbrs	r0, 7
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <displayNumber+0x18e>
		SET_SHC;
     6c4:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     6c6:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x40);
     6c8:	80 e4       	ldi	r24, 0x40	; 64
     6ca:	8e bd       	out	0x2e, r24	; 46
     6cc:	0d b4       	in	r0, 0x2d	; 45
     6ce:	07 fe       	sbrs	r0, 7
     6d0:	fd cf       	rjmp	.-6      	; 0x6cc <displayNumber+0x19c>
		SPI_595_T(g_aDisplayBuf[num[0]>>4]);
     6d2:	a0 81       	ld	r26, Z
     6d4:	a2 95       	swap	r26
     6d6:	af 70       	andi	r26, 0x0F	; 15
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	a2 5f       	subi	r26, 0xF2	; 242
     6dc:	be 4f       	sbci	r27, 0xFE	; 254
     6de:	8c 91       	ld	r24, X
     6e0:	8e bd       	out	0x2e, r24	; 46
     6e2:	0d b4       	in	r0, 0x2d	; 45
     6e4:	07 fe       	sbrs	r0, 7
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <displayNumber+0x1b2>
		SET_SHC;
     6e8:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     6ea:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x10);
     6ec:	80 e1       	ldi	r24, 0x10	; 16
     6ee:	8e bd       	out	0x2e, r24	; 46
     6f0:	0d b4       	in	r0, 0x2d	; 45
     6f2:	07 fe       	sbrs	r0, 7
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <displayNumber+0x1c0>
		SPI_595_T(g_aDisplayBuf[num[1]&0x0F]);
     6f6:	a1 81       	ldd	r26, Z+1	; 0x01
     6f8:	af 70       	andi	r26, 0x0F	; 15
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	a2 5f       	subi	r26, 0xF2	; 242
     6fe:	be 4f       	sbci	r27, 0xFE	; 254
     700:	8c 91       	ld	r24, X
     702:	8e bd       	out	0x2e, r24	; 46
     704:	0d b4       	in	r0, 0x2d	; 45
     706:	07 fe       	sbrs	r0, 7
     708:	fd cf       	rjmp	.-6      	; 0x704 <displayNumber+0x1d4>
		SET_SHC;
     70a:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     70c:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x08);
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	8e bd       	out	0x2e, r24	; 46
     712:	0d b4       	in	r0, 0x2d	; 45
     714:	07 fe       	sbrs	r0, 7
     716:	fd cf       	rjmp	.-6      	; 0x712 <displayNumber+0x1e2>
		SPI_595_T(g_aDisplayBuf[num[1]>>4]);
     718:	a1 81       	ldd	r26, Z+1	; 0x01
     71a:	a2 95       	swap	r26
     71c:	af 70       	andi	r26, 0x0F	; 15
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	a2 5f       	subi	r26, 0xF2	; 242
     722:	be 4f       	sbci	r27, 0xFE	; 254
     724:	8c 91       	ld	r24, X
     726:	8e bd       	out	0x2e, r24	; 46
     728:	0d b4       	in	r0, 0x2d	; 45
     72a:	07 fe       	sbrs	r0, 7
     72c:	fd cf       	rjmp	.-6      	; 0x728 <displayNumber+0x1f8>
		SET_SHC;
     72e:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     730:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x02);
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	8e bd       	out	0x2e, r24	; 46
     736:	0d b4       	in	r0, 0x2d	; 45
     738:	07 fe       	sbrs	r0, 7
     73a:	fd cf       	rjmp	.-6      	; 0x736 <displayNumber+0x206>
		SPI_595_T(g_aDisplayBuf[num[2]&0x0F]);
     73c:	a2 81       	ldd	r26, Z+2	; 0x02
     73e:	af 70       	andi	r26, 0x0F	; 15
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	a2 5f       	subi	r26, 0xF2	; 242
     744:	be 4f       	sbci	r27, 0xFE	; 254
     746:	8c 91       	ld	r24, X
     748:	8e bd       	out	0x2e, r24	; 46
     74a:	0d b4       	in	r0, 0x2d	; 45
     74c:	07 fe       	sbrs	r0, 7
     74e:	fd cf       	rjmp	.-6      	; 0x74a <displayNumber+0x21a>
		SET_SHC;
     750:	5b 9a       	sbi	0x0b, 3	; 11
		CLR_SHC;
     752:	5b 98       	cbi	0x0b, 3	; 11
		SPI_595_T(0x01);
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	8e bd       	out	0x2e, r24	; 46
     758:	0d b4       	in	r0, 0x2d	; 45
     75a:	07 fe       	sbrs	r0, 7
     75c:	fd cf       	rjmp	.-6      	; 0x758 <displayNumber+0x228>
		SPI_595_T(g_aDisplayBuf[num[2]>>4]);
     75e:	e2 81       	ldd	r30, Z+2	; 0x02
     760:	e2 95       	swap	r30
     762:	ef 70       	andi	r30, 0x0F	; 15
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	e2 5f       	subi	r30, 0xF2	; 242
     768:	fe 4f       	sbci	r31, 0xFE	; 254
     76a:	80 81       	ld	r24, Z
     76c:	8e bd       	out	0x2e, r24	; 46
     76e:	0d b4       	in	r0, 0x2d	; 45
     770:	07 fe       	sbrs	r0, 7
     772:	fd cf       	rjmp	.-6      	; 0x76e <displayNumber+0x23e>
		SET_SHC;
     774:	5b 9a       	sbi	0x0b, 3	; 11
     776:	08 95       	ret

00000778 <__vector_16>:
	}
}
ISR(TIMER0_OVF_vect)
{
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	2f 93       	push	r18
     784:	3f 93       	push	r19
     786:	4f 93       	push	r20
     788:	5f 93       	push	r21
     78a:	6f 93       	push	r22
     78c:	7f 93       	push	r23
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	af 93       	push	r26
     794:	bf 93       	push	r27
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
	//displayNumber(M41T00_addr,0);
	//tenms++;                  // Read DS1307 every 100 x 10ms = 1 sec
	//if (tenms >= 2) {
		//cli();                                // Disable Interupt
		// Read DS1307
		if(bit_is_clear(PINC,PC3))
     79a:	33 99       	sbic	0x06, 3	; 6
     79c:	12 c0       	rjmp	.+36     	; 0x7c2 <__vector_16+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79e:	89 e9       	ldi	r24, 0x99	; 153
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <__vector_16+0x2a>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <__vector_16+0x30>
		{
			_delay_us(500);
			
			if(bit_is_clear(PINC,PC3))
     7a8:	33 99       	sbic	0x06, 3	; 6
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <__vector_16+0x3e>
			   h++;
     7ac:	80 91 37 02 	lds	r24, 0x0237
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	80 93 37 02 	sts	0x0237, r24
			   if(h>2) h=0;
     7b6:	80 91 37 02 	lds	r24, 0x0237
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	10 f0       	brcs	.+4      	; 0x7c2 <__vector_16+0x4a>
     7be:	10 92 37 02 	sts	0x0237, r1
		}
		   
	
		Read_M41T00();
     7c2:	0e 94 9d 01 	call	0x33a	; 0x33a <Read_M41T00>
		Read_TMP112();
     7c6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <Read_TMP112>
		//sei();
	//}
		
		
}
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	bf 91       	pop	r27
     7d0:	af 91       	pop	r26
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	7f 91       	pop	r23
     7d8:	6f 91       	pop	r22
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0
     7e8:	1f 90       	pop	r1
     7ea:	18 95       	reti

000007ec <__vector_9>:
ISR(TIMER2_OVF_vect)
{
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	ef 93       	push	r30
     80c:	ff 93       	push	r31
			h=0;
			
			
			
		}**/
	displayNumber(M41T00_addr,h);
     80e:	60 91 37 02 	lds	r22, 0x0237
     812:	8e e2       	ldi	r24, 0x2E	; 46
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	0e 94 98 02 	call	0x530	; 0x530 <displayNumber>
}
     81a:	ff 91       	pop	r31
     81c:	ef 91       	pop	r30
     81e:	bf 91       	pop	r27
     820:	af 91       	pop	r26
     822:	9f 91       	pop	r25
     824:	8f 91       	pop	r24
     826:	7f 91       	pop	r23
     828:	6f 91       	pop	r22
     82a:	5f 91       	pop	r21
     82c:	4f 91       	pop	r20
     82e:	3f 91       	pop	r19
     830:	2f 91       	pop	r18
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <Port_init>:
	

void Port_init(void)
{
	PORTC=0xff;		DDRC=0x08;
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	88 b9       	out	0x08, r24	; 8
     840:	88 e0       	ldi	r24, 0x08	; 8
     842:	87 b9       	out	0x07, r24	; 7
	PORTD=0x04;		DDRD=0x0C;
     844:	84 e0       	ldi	r24, 0x04	; 4
     846:	8b b9       	out	0x0b, r24	; 11
     848:	8c e0       	ldi	r24, 0x0C	; 12
     84a:	8a b9       	out	0x0a, r24	; 10
     84c:	08 95       	ret

0000084e <Spi_init>:
}
void Spi_init(void)
{
	DDRB|=_BV(PB5) | _BV(PB3) | _BV(PB2);
     84e:	84 b1       	in	r24, 0x04	; 4
     850:	8c 62       	ori	r24, 0x2C	; 44
     852:	84 b9       	out	0x04, r24	; 4
	SPCR=_BV(SPE) | _BV(MSTR) | _BV(SPR0);
     854:	81 e5       	ldi	r24, 0x51	; 81
     856:	8c bd       	out	0x2c, r24	; 44
	SPSR=0x00;
     858:	1d bc       	out	0x2d, r1	; 45
     85a:	08 95       	ret

0000085c <main>:
FILE uart_str = FDEV_SETUP_STREAM(uart_putch, uart_getch, _FDEV_SETUP_RW);

int main(void)
{
	 char mode,ichoice;
	stdout = stdin = &uart_str;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	90 93 39 02 	sts	0x0239, r25
     864:	80 93 38 02 	sts	0x0238, r24
     868:	90 93 3b 02 	sts	0x023B, r25
     86c:	80 93 3a 02 	sts	0x023A, r24
	Port_init();
     870:	0e 94 1e 04 	call	0x83c	; 0x83c <Port_init>
	Spi_init();
     874:	0e 94 27 04 	call	0x84e	; 0x84e <Spi_init>
	uart_init();
     878:	0e 94 7b 00 	call	0xf6	; 0xf6 <uart_init>
	
	  // Initial ATMega168 TWI/I2C Peripheral
	  TWSR = 0x00;   // Select Prescaler of 1
     87c:	10 92 b9 00 	sts	0x00B9, r1
	  // SCL frequency = 11059200 / (16 + 2 * 48 * 1) = 98.743 khz
	  TWBR = 0x20;   // 48 Decimal
     880:	80 e2       	ldi	r24, 0x20	; 32
     882:	80 93 b8 00 	sts	0x00B8, r24
	    // Initial ATMega168 Timer/Counter0 Peripheral
	  TCCR0A=0x00; TCCR2A=0x00;                 // Normal Timer0 Operation
     886:	14 bc       	out	0x24, r1	; 36
     888:	10 92 b0 00 	sts	0x00B0, r1
	  TCCR0B=(1<<CS02)|(1<<CS00);
     88c:	95 e0       	ldi	r25, 0x05	; 5
     88e:	95 bd       	out	0x25, r25	; 37
	  TCCR2B=(1<<CS21);                 // Use maximum prescaller: Clk/1024
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	90 93 b1 00 	sts	0x00B1, r25
	  TCNT0=0x20;
     896:	86 bd       	out	0x26, r24	; 38
	  TCNT2=0x00;                   // Start counter from 0x94, overflow at 10 mSec
     898:	10 92 b2 00 	sts	0x00B2, r1
	  TIMSK0=(1<<TOIE0);
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 6e 00 	sts	0x006E, r24
	  TIMSK2=(1<<TOIE0);           // Enable Counter Overflow Interrupt
     8a2:	80 93 70 00 	sts	0x0070, r24
	  sei();  
     8a6:	78 94       	sei
	  mode = 0; 
	  h = 0;                     // Enable Interrupt
     8a8:	10 92 37 02 	sts	0x0237, r1
	  TCNT0=0x20;
	  TCNT2=0x00;                   // Start counter from 0x94, overflow at 10 mSec
	  TIMSK0=(1<<TOIE0);
	  TIMSK2=(1<<TOIE0);           // Enable Counter Overflow Interrupt
	  sei();  
	  mode = 0; 
     8ac:	d1 2c       	mov	r13, r1
		if (mode)
	{
		ansi_me();
		ansi_cl();                            // Clear Screen
		ansi_cm(1,1);
		printf("AVR Mega168PA M41T00 RTC Setup");
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f1 e3       	ldi	r31, 0x31	; 49
     8b2:	4f 2e       	mov	r4, r31
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	5f 2e       	mov	r5, r31
     8b8:	f0 2d       	mov	r31, r0
		ansi_cm(3,1);
		printf("1. Time: %02d:%02d:%02d\n",M41T00_addr[2],M41T00_addr[1],M41T00_addr[0]);
     8ba:	0f 2e       	mov	r0, r31
     8bc:	fe e2       	ldi	r31, 0x2E	; 46
     8be:	af 2e       	mov	r10, r31
     8c0:	f2 e0       	ldi	r31, 0x02	; 2
     8c2:	bf 2e       	mov	r11, r31
     8c4:	f0 2d       	mov	r31, r0
     8c6:	0f 2e       	mov	r0, r31
     8c8:	f0 e5       	ldi	r31, 0x50	; 80
     8ca:	2f 2e       	mov	r2, r31
     8cc:	f1 e0       	ldi	r31, 0x01	; 1
     8ce:	3f 2e       	mov	r3, r31
     8d0:	f0 2d       	mov	r31, r0
		//printf("2. Mode 24/12: %d, AM/PM: %d\n",hour_mode,ampm_mode);
		printf("2. Date: %02d-%02d-20%02d, Week Day: %d\n",M41T00_addr[4],M41T00_addr[5],M41T00_addr[6],M41T00_addr[3]);
     8d2:	c4 e3       	ldi	r28, 0x34	; 52
     8d4:	d2 e0       	ldi	r29, 0x02	; 2
     8d6:	0f 2e       	mov	r0, r31
     8d8:	f3 e3       	ldi	r31, 0x33	; 51
     8da:	8f 2e       	mov	r8, r31
     8dc:	f2 e0       	ldi	r31, 0x02	; 2
     8de:	9f 2e       	mov	r9, r31
     8e0:	f0 2d       	mov	r31, r0
     8e2:	0f 2e       	mov	r0, r31
     8e4:	f2 e3       	ldi	r31, 0x32	; 50
     8e6:	6f 2e       	mov	r6, r31
     8e8:	f2 e0       	ldi	r31, 0x02	; 2
     8ea:	7f 2e       	mov	r7, r31
     8ec:	f0 2d       	mov	r31, r0
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f9 e6       	ldi	r31, 0x69	; 105
     8f2:	ef 2e       	mov	r14, r31
     8f4:	f1 e0       	ldi	r31, 0x01	; 1
     8f6:	ff 2e       	mov	r15, r31
     8f8:	f0 2d       	mov	r31, r0
		printf("3. Save and Exit\n");
		printf("4. Exit\n");
		printf("\nEnter Choice: ");
     8fa:	0b ea       	ldi	r16, 0xAB	; 171
     8fc:	11 e0       	ldi	r17, 0x01	; 1
    while(1)
    {
		
		//displayNumber(M41T00_addr,0);
		
		if (bit_is_clear(PIND,PD2))
     8fe:	4a 99       	sbic	0x09, 2	; 9
     900:	0c c0       	rjmp	.+24     	; 0x91a <main+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	93 e2       	ldi	r25, 0x23	; 35
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <main+0xaa>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <main+0xb0>
     90c:	00 00       	nop
		{
			_delay_ms(5);
			
			if(bit_is_clear(PIND,PD2))
     90e:	4a 99       	sbic	0x09, 2	; 9
     910:	04 c0       	rjmp	.+8      	; 0x91a <main+0xbe>
			{
				cli();
     912:	f8 94       	cli
				mode=1;
     914:	dd 24       	eor	r13, r13
     916:	d3 94       	inc	r13
     918:	02 c0       	rjmp	.+4      	; 0x91e <main+0xc2>
			}
		}
		if (mode)
     91a:	dd 20       	and	r13, r13
     91c:	81 f3       	breq	.-32     	; 0x8fe <main+0xa2>
	{
		ansi_me();
     91e:	0e 94 b2 00 	call	0x164	; 0x164 <ansi_me>
		ansi_cl();                            // Clear Screen
     922:	0e 94 87 00 	call	0x10e	; 0x10e <ansi_cl>
		ansi_cm(1,1);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ansi_cm>
		printf("AVR Mega168PA M41T00 RTC Setup");
     92e:	5f 92       	push	r5
     930:	4f 92       	push	r4
     932:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
		ansi_cm(3,1);
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ansi_cm>
		printf("1. Time: %02d:%02d:%02d\n",M41T00_addr[2],M41T00_addr[1],M41T00_addr[0]);
     93e:	d5 01       	movw	r26, r10
     940:	8c 91       	ld	r24, X
     942:	1f 92       	push	r1
     944:	8f 93       	push	r24
     946:	ef e2       	ldi	r30, 0x2F	; 47
     948:	f2 e0       	ldi	r31, 0x02	; 2
     94a:	80 81       	ld	r24, Z
     94c:	1f 92       	push	r1
     94e:	8f 93       	push	r24
     950:	a0 e3       	ldi	r26, 0x30	; 48
     952:	b2 e0       	ldi	r27, 0x02	; 2
     954:	8c 91       	ld	r24, X
     956:	1f 92       	push	r1
     958:	8f 93       	push	r24
     95a:	3f 92       	push	r3
     95c:	2f 92       	push	r2
     95e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
		//printf("2. Mode 24/12: %d, AM/PM: %d\n",hour_mode,ampm_mode);
		printf("2. Date: %02d-%02d-20%02d, Week Day: %d\n",M41T00_addr[4],M41T00_addr[5],M41T00_addr[6],M41T00_addr[3]);
     962:	e1 e3       	ldi	r30, 0x31	; 49
     964:	f2 e0       	ldi	r31, 0x02	; 2
     966:	80 81       	ld	r24, Z
     968:	1f 92       	push	r1
     96a:	8f 93       	push	r24
     96c:	88 81       	ld	r24, Y
     96e:	1f 92       	push	r1
     970:	8f 93       	push	r24
     972:	d4 01       	movw	r26, r8
     974:	8c 91       	ld	r24, X
     976:	1f 92       	push	r1
     978:	8f 93       	push	r24
     97a:	f3 01       	movw	r30, r6
     97c:	80 81       	ld	r24, Z
     97e:	1f 92       	push	r1
     980:	8f 93       	push	r24
     982:	ff 92       	push	r15
     984:	ef 92       	push	r14
     986:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
		printf("3. Save and Exit\n");
     98a:	82 e9       	ldi	r24, 0x92	; 146
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 a1 05 	call	0xb42	; 0xb42 <puts>
		printf("4. Exit\n");
     992:	83 ea       	ldi	r24, 0xA3	; 163
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 a1 05 	call	0xb42	; 0xb42 <puts>
		printf("\nEnter Choice: ");
     99a:	1f 93       	push	r17
     99c:	0f 93       	push	r16
     99e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
		if ((ichoice=getnumber(1,5)) < 0) continue;
     9a2:	65 e0       	ldi	r22, 0x05	; 5
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <getnumber>
		switch (ichoice) {
     9aa:	2d b7       	in	r18, 0x3d	; 61
     9ac:	3e b7       	in	r19, 0x3e	; 62
     9ae:	2a 5e       	subi	r18, 0xEA	; 234
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	3e bf       	out	0x3e, r19	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	2d bf       	out	0x3d, r18	; 61
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	c1 f1       	breq	.+112    	; 0xa30 <main+0x1d4>
     9c0:	18 f4       	brcc	.+6      	; 0x9c8 <main+0x16c>
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	41 f0       	breq	.+16     	; 0x9d6 <main+0x17a>
     9c6:	9b cf       	rjmp	.-202    	; 0x8fe <main+0xa2>
     9c8:	83 30       	cpi	r24, 0x03	; 3
     9ca:	09 f4       	brne	.+2      	; 0x9ce <main+0x172>
     9cc:	6b c0       	rjmp	.+214    	; 0xaa4 <main+0x248>
     9ce:	84 30       	cpi	r24, 0x04	; 4
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <main+0x178>
     9d2:	6a c0       	rjmp	.+212    	; 0xaa8 <main+0x24c>
     9d4:	94 cf       	rjmp	.-216    	; 0x8fe <main+0xa2>
			case 1:  // DS1307 Time Setup
			printf("\n\nHour [0-24]: ");
     9d6:	8b eb       	ldi	r24, 0xBB	; 187
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
			if ((M41T00_addr[2]=getnumber(0,24)) < 0) continue;
     9e2:	68 e1       	ldi	r22, 0x18	; 24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <getnumber>
     9ea:	a0 e3       	ldi	r26, 0x30	; 48
     9ec:	b2 e0       	ldi	r27, 0x02	; 2
     9ee:	8c 93       	st	X, r24
			printf("\nMinute [0-59]: ");
     9f0:	8b ec       	ldi	r24, 0xCB	; 203
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
			if ((M41T00_addr[1]=getnumber(0,59)) < 0) continue;
     9fc:	6b e3       	ldi	r22, 0x3B	; 59
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 51 02 	call	0x4a2	; 0x4a2 <getnumber>
     a04:	ef e2       	ldi	r30, 0x2F	; 47
     a06:	f2 e0       	ldi	r31, 0x02	; 2
     a08:	80 83       	st	Z, r24
			printf("\nSecond [0-59]: ");
     a0a:	8c ed       	ldi	r24, 0xDC	; 220
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
			if ((M41T00_addr[0]=getnumber(0,59)) < 0) continue;
     a16:	6b e3       	ldi	r22, 0x3B	; 59
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <getnumber>
     a1e:	d5 01       	movw	r26, r10
     a20:	8c 93       	st	X, r24
			break;
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	67 cf       	rjmp	.-306    	; 0x8fe <main+0xa2>
			printf("\nAM/PM 0> AM, 1> PM: ");
			if ((ampm_mode=getnumber(0,1)) < 0) continue;
			break;
			*/
			case 2:  // DS1307 Date Setup
			printf("\n\nWeekDay [1-7]: ");
     a30:	ad ee       	ldi	r26, 0xED	; 237
     a32:	b1 e0       	ldi	r27, 0x01	; 1
     a34:	bf 93       	push	r27
     a36:	af 93       	push	r26
     a38:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
			if ((M41T00_addr[3]=getnumber(1,7)) < 0) continue;
     a3c:	67 e0       	ldi	r22, 0x07	; 7
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	0e 94 51 02 	call	0x4a2	; 0x4a2 <getnumber>
     a44:	a1 e3       	ldi	r26, 0x31	; 49
     a46:	b2 e0       	ldi	r27, 0x02	; 2
     a48:	8c 93       	st	X, r24
			printf("\nDate [1-31]: ");
     a4a:	af ef       	ldi	r26, 0xFF	; 255
     a4c:	b1 e0       	ldi	r27, 0x01	; 1
     a4e:	bf 93       	push	r27
     a50:	af 93       	push	r26
     a52:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
			if ((M41T00_addr[4]=getnumber(1,31)) < 0) continue;			  ;
     a56:	6f e1       	ldi	r22, 0x1F	; 31
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <getnumber>
     a5e:	d3 01       	movw	r26, r6
     a60:	8c 93       	st	X, r24
			printf("\nMonth [1-12]: ");
     a62:	8e e0       	ldi	r24, 0x0E	; 14
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
			if ((M41T00_addr[5]=getnumber(1,12)) < 0) continue;
     a6e:	6c e0       	ldi	r22, 0x0C	; 12
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	0e 94 51 02 	call	0x4a2	; 0x4a2 <getnumber>
     a76:	f4 01       	movw	r30, r8
     a78:	80 83       	st	Z, r24
			printf("\nYear [0-99]: ");
     a7a:	8e e1       	ldi	r24, 0x1E	; 30
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	0e 94 8d 05 	call	0xb1a	; 0xb1a <printf>
			if ((M41T00_addr[6]=getnumber(0,99)) < 0) continue;
     a86:	63 e6       	ldi	r22, 0x63	; 99
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <getnumber>
     a8e:	88 83       	st	Y, r24
     a90:	2d b7       	in	r18, 0x3d	; 61
     a92:	3e b7       	in	r19, 0x3e	; 62
     a94:	28 5f       	subi	r18, 0xF8	; 248
     a96:	3f 4f       	sbci	r19, 0xFF	; 255
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	3e bf       	out	0x3e, r19	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	2d bf       	out	0x3d, r18	; 61
     aa2:	2d cf       	rjmp	.-422    	; 0x8fe <main+0xa2>
			break;
			case 3:  // Save to DS1307 Register and Exit Setup
			Write_M41T00();
     aa4:	0e 94 2b 02 	call	0x456	; 0x456 <Write_M41T00>
			case 4:  // Exit Setup
			mode = 0;
			ansi_cl();
     aa8:	0e 94 87 00 	call	0x10e	; 0x10e <ansi_cl>
				OCR2A=icount;
				_delay_ms(3);
				*/
			
			
			TCNT0=0x94;
     aac:	84 e9       	ldi	r24, 0x94	; 148
     aae:	86 bd       	out	0x26, r24	; 38
			sei();   // Enable Interrupt
     ab0:	78 94       	sei
			if ((M41T00_addr[6]=getnumber(0,99)) < 0) continue;
			break;
			case 3:  // Save to DS1307 Register and Exit Setup
			Write_M41T00();
			case 4:  // Exit Setup
			mode = 0;
     ab2:	d1 2c       	mov	r13, r1
				*/
			
			
			TCNT0=0x94;
			sei();   // Enable Interrupt
			break;
     ab4:	24 cf       	rjmp	.-440    	; 0x8fe <main+0xa2>

00000ab6 <fputc>:
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	18 2f       	mov	r17, r24
     ac0:	09 2f       	mov	r16, r25
     ac2:	eb 01       	movw	r28, r22
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	81 fd       	sbrc	r24, 1
     ac8:	03 c0       	rjmp	.+6      	; 0xad0 <fputc+0x1a>
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	9f ef       	ldi	r25, 0xFF	; 255
     ace:	20 c0       	rjmp	.+64     	; 0xb10 <fputc+0x5a>
     ad0:	82 ff       	sbrs	r24, 2
     ad2:	10 c0       	rjmp	.+32     	; 0xaf4 <fputc+0x3e>
     ad4:	4e 81       	ldd	r20, Y+6	; 0x06
     ad6:	5f 81       	ldd	r21, Y+7	; 0x07
     ad8:	2c 81       	ldd	r18, Y+4	; 0x04
     ada:	3d 81       	ldd	r19, Y+5	; 0x05
     adc:	42 17       	cp	r20, r18
     ade:	53 07       	cpc	r21, r19
     ae0:	7c f4       	brge	.+30     	; 0xb00 <fputc+0x4a>
     ae2:	e8 81       	ld	r30, Y
     ae4:	f9 81       	ldd	r31, Y+1	; 0x01
     ae6:	9f 01       	movw	r18, r30
     ae8:	2f 5f       	subi	r18, 0xFF	; 255
     aea:	3f 4f       	sbci	r19, 0xFF	; 255
     aec:	39 83       	std	Y+1, r19	; 0x01
     aee:	28 83       	st	Y, r18
     af0:	10 83       	st	Z, r17
     af2:	06 c0       	rjmp	.+12     	; 0xb00 <fputc+0x4a>
     af4:	e8 85       	ldd	r30, Y+8	; 0x08
     af6:	f9 85       	ldd	r31, Y+9	; 0x09
     af8:	81 2f       	mov	r24, r17
     afa:	09 95       	icall
     afc:	89 2b       	or	r24, r25
     afe:	29 f7       	brne	.-54     	; 0xaca <fputc+0x14>
     b00:	2e 81       	ldd	r18, Y+6	; 0x06
     b02:	3f 81       	ldd	r19, Y+7	; 0x07
     b04:	2f 5f       	subi	r18, 0xFF	; 255
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	3f 83       	std	Y+7, r19	; 0x07
     b0a:	2e 83       	std	Y+6, r18	; 0x06
     b0c:	81 2f       	mov	r24, r17
     b0e:	90 2f       	mov	r25, r16
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	08 95       	ret

00000b1a <printf>:
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	e3 e9       	ldi	r30, 0x93	; 147
     b20:	f5 e0       	ldi	r31, 0x05	; 5
     b22:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__prologue_saves__+0x20>
     b26:	fe 01       	movw	r30, r28
     b28:	35 96       	adiw	r30, 0x05	; 5
     b2a:	61 91       	ld	r22, Z+
     b2c:	71 91       	ld	r23, Z+
     b2e:	af 01       	movw	r20, r30
     b30:	80 91 3a 02 	lds	r24, 0x023A
     b34:	90 91 3b 02 	lds	r25, 0x023B
     b38:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <vfprintf>
     b3c:	e2 e0       	ldi	r30, 0x02	; 2
     b3e:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__epilogue_restores__+0x20>

00000b42 <puts>:
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	e0 91 3a 02 	lds	r30, 0x023A
     b4e:	f0 91 3b 02 	lds	r31, 0x023B
     b52:	23 81       	ldd	r18, Z+3	; 0x03
     b54:	21 ff       	sbrs	r18, 1
     b56:	1b c0       	rjmp	.+54     	; 0xb8e <puts+0x4c>
     b58:	ec 01       	movw	r28, r24
     b5a:	00 e0       	ldi	r16, 0x00	; 0
     b5c:	10 e0       	ldi	r17, 0x00	; 0
     b5e:	89 91       	ld	r24, Y+
     b60:	60 91 3a 02 	lds	r22, 0x023A
     b64:	70 91 3b 02 	lds	r23, 0x023B
     b68:	db 01       	movw	r26, r22
     b6a:	18 96       	adiw	r26, 0x08	; 8
     b6c:	ed 91       	ld	r30, X+
     b6e:	fc 91       	ld	r31, X
     b70:	19 97       	sbiw	r26, 0x09	; 9
     b72:	88 23       	and	r24, r24
     b74:	31 f0       	breq	.+12     	; 0xb82 <puts+0x40>
     b76:	09 95       	icall
     b78:	89 2b       	or	r24, r25
     b7a:	89 f3       	breq	.-30     	; 0xb5e <puts+0x1c>
     b7c:	0f ef       	ldi	r16, 0xFF	; 255
     b7e:	1f ef       	ldi	r17, 0xFF	; 255
     b80:	ee cf       	rjmp	.-36     	; 0xb5e <puts+0x1c>
     b82:	8a e0       	ldi	r24, 0x0A	; 10
     b84:	09 95       	icall
     b86:	89 2b       	or	r24, r25
     b88:	11 f4       	brne	.+4      	; 0xb8e <puts+0x4c>
     b8a:	c8 01       	movw	r24, r16
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <puts+0x50>
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <scanf>:
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e4 ed       	ldi	r30, 0xD4	; 212
     ba2:	f5 e0       	ldi	r31, 0x05	; 5
     ba4:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__prologue_saves__+0x20>
     ba8:	fe 01       	movw	r30, r28
     baa:	35 96       	adiw	r30, 0x05	; 5
     bac:	61 91       	ld	r22, Z+
     bae:	71 91       	ld	r23, Z+
     bb0:	af 01       	movw	r20, r30
     bb2:	80 91 38 02 	lds	r24, 0x0238
     bb6:	90 91 39 02 	lds	r25, 0x0239
     bba:	0e 94 32 09 	call	0x1264	; 0x1264 <vfscanf>
     bbe:	e2 e0       	ldi	r30, 0x02	; 2
     bc0:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__epilogue_restores__+0x20>

00000bc4 <vfprintf>:
     bc4:	ac e0       	ldi	r26, 0x0C	; 12
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e8 ee       	ldi	r30, 0xE8	; 232
     bca:	f5 e0       	ldi	r31, 0x05	; 5
     bcc:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__prologue_saves__>
     bd0:	7c 01       	movw	r14, r24
     bd2:	6b 01       	movw	r12, r22
     bd4:	8a 01       	movw	r16, r20
     bd6:	fc 01       	movw	r30, r24
     bd8:	17 82       	std	Z+7, r1	; 0x07
     bda:	16 82       	std	Z+6, r1	; 0x06
     bdc:	83 81       	ldd	r24, Z+3	; 0x03
     bde:	81 ff       	sbrs	r24, 1
     be0:	bd c1       	rjmp	.+890    	; 0xf5c <vfprintf+0x398>
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	4c 01       	movw	r8, r24
     be8:	f7 01       	movw	r30, r14
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	f6 01       	movw	r30, r12
     bee:	93 fd       	sbrc	r25, 3
     bf0:	85 91       	lpm	r24, Z+
     bf2:	93 ff       	sbrs	r25, 3
     bf4:	81 91       	ld	r24, Z+
     bf6:	6f 01       	movw	r12, r30
     bf8:	88 23       	and	r24, r24
     bfa:	09 f4       	brne	.+2      	; 0xbfe <vfprintf+0x3a>
     bfc:	ab c1       	rjmp	.+854    	; 0xf54 <vfprintf+0x390>
     bfe:	85 32       	cpi	r24, 0x25	; 37
     c00:	39 f4       	brne	.+14     	; 0xc10 <vfprintf+0x4c>
     c02:	93 fd       	sbrc	r25, 3
     c04:	85 91       	lpm	r24, Z+
     c06:	93 ff       	sbrs	r25, 3
     c08:	81 91       	ld	r24, Z+
     c0a:	6f 01       	movw	r12, r30
     c0c:	85 32       	cpi	r24, 0x25	; 37
     c0e:	29 f4       	brne	.+10     	; 0xc1a <vfprintf+0x56>
     c10:	b7 01       	movw	r22, r14
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     c18:	e7 cf       	rjmp	.-50     	; 0xbe8 <vfprintf+0x24>
     c1a:	51 2c       	mov	r5, r1
     c1c:	31 2c       	mov	r3, r1
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	20 32       	cpi	r18, 0x20	; 32
     c22:	a0 f4       	brcc	.+40     	; 0xc4c <vfprintf+0x88>
     c24:	8b 32       	cpi	r24, 0x2B	; 43
     c26:	69 f0       	breq	.+26     	; 0xc42 <vfprintf+0x7e>
     c28:	30 f4       	brcc	.+12     	; 0xc36 <vfprintf+0x72>
     c2a:	80 32       	cpi	r24, 0x20	; 32
     c2c:	59 f0       	breq	.+22     	; 0xc44 <vfprintf+0x80>
     c2e:	83 32       	cpi	r24, 0x23	; 35
     c30:	69 f4       	brne	.+26     	; 0xc4c <vfprintf+0x88>
     c32:	20 61       	ori	r18, 0x10	; 16
     c34:	2c c0       	rjmp	.+88     	; 0xc8e <vfprintf+0xca>
     c36:	8d 32       	cpi	r24, 0x2D	; 45
     c38:	39 f0       	breq	.+14     	; 0xc48 <vfprintf+0x84>
     c3a:	80 33       	cpi	r24, 0x30	; 48
     c3c:	39 f4       	brne	.+14     	; 0xc4c <vfprintf+0x88>
     c3e:	21 60       	ori	r18, 0x01	; 1
     c40:	26 c0       	rjmp	.+76     	; 0xc8e <vfprintf+0xca>
     c42:	22 60       	ori	r18, 0x02	; 2
     c44:	24 60       	ori	r18, 0x04	; 4
     c46:	23 c0       	rjmp	.+70     	; 0xc8e <vfprintf+0xca>
     c48:	28 60       	ori	r18, 0x08	; 8
     c4a:	21 c0       	rjmp	.+66     	; 0xc8e <vfprintf+0xca>
     c4c:	27 fd       	sbrc	r18, 7
     c4e:	27 c0       	rjmp	.+78     	; 0xc9e <vfprintf+0xda>
     c50:	30 ed       	ldi	r19, 0xD0	; 208
     c52:	38 0f       	add	r19, r24
     c54:	3a 30       	cpi	r19, 0x0A	; 10
     c56:	78 f4       	brcc	.+30     	; 0xc76 <vfprintf+0xb2>
     c58:	26 ff       	sbrs	r18, 6
     c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0xa4>
     c5c:	fa e0       	ldi	r31, 0x0A	; 10
     c5e:	5f 9e       	mul	r5, r31
     c60:	30 0d       	add	r19, r0
     c62:	11 24       	eor	r1, r1
     c64:	53 2e       	mov	r5, r19
     c66:	13 c0       	rjmp	.+38     	; 0xc8e <vfprintf+0xca>
     c68:	8a e0       	ldi	r24, 0x0A	; 10
     c6a:	38 9e       	mul	r3, r24
     c6c:	30 0d       	add	r19, r0
     c6e:	11 24       	eor	r1, r1
     c70:	33 2e       	mov	r3, r19
     c72:	20 62       	ori	r18, 0x20	; 32
     c74:	0c c0       	rjmp	.+24     	; 0xc8e <vfprintf+0xca>
     c76:	8e 32       	cpi	r24, 0x2E	; 46
     c78:	21 f4       	brne	.+8      	; 0xc82 <vfprintf+0xbe>
     c7a:	26 fd       	sbrc	r18, 6
     c7c:	6b c1       	rjmp	.+726    	; 0xf54 <vfprintf+0x390>
     c7e:	20 64       	ori	r18, 0x40	; 64
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <vfprintf+0xca>
     c82:	8c 36       	cpi	r24, 0x6C	; 108
     c84:	11 f4       	brne	.+4      	; 0xc8a <vfprintf+0xc6>
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <vfprintf+0xca>
     c8a:	88 36       	cpi	r24, 0x68	; 104
     c8c:	41 f4       	brne	.+16     	; 0xc9e <vfprintf+0xda>
     c8e:	f6 01       	movw	r30, r12
     c90:	93 fd       	sbrc	r25, 3
     c92:	85 91       	lpm	r24, Z+
     c94:	93 ff       	sbrs	r25, 3
     c96:	81 91       	ld	r24, Z+
     c98:	6f 01       	movw	r12, r30
     c9a:	81 11       	cpse	r24, r1
     c9c:	c1 cf       	rjmp	.-126    	; 0xc20 <vfprintf+0x5c>
     c9e:	98 2f       	mov	r25, r24
     ca0:	9f 7d       	andi	r25, 0xDF	; 223
     ca2:	95 54       	subi	r25, 0x45	; 69
     ca4:	93 30       	cpi	r25, 0x03	; 3
     ca6:	28 f4       	brcc	.+10     	; 0xcb2 <vfprintf+0xee>
     ca8:	0c 5f       	subi	r16, 0xFC	; 252
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	ff e3       	ldi	r31, 0x3F	; 63
     cae:	f9 83       	std	Y+1, r31	; 0x01
     cb0:	0d c0       	rjmp	.+26     	; 0xccc <vfprintf+0x108>
     cb2:	83 36       	cpi	r24, 0x63	; 99
     cb4:	31 f0       	breq	.+12     	; 0xcc2 <vfprintf+0xfe>
     cb6:	83 37       	cpi	r24, 0x73	; 115
     cb8:	71 f0       	breq	.+28     	; 0xcd6 <vfprintf+0x112>
     cba:	83 35       	cpi	r24, 0x53	; 83
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <vfprintf+0xfc>
     cbe:	5b c0       	rjmp	.+182    	; 0xd76 <vfprintf+0x1b2>
     cc0:	22 c0       	rjmp	.+68     	; 0xd06 <vfprintf+0x142>
     cc2:	f8 01       	movw	r30, r16
     cc4:	80 81       	ld	r24, Z
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	0e 5f       	subi	r16, 0xFE	; 254
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	44 24       	eor	r4, r4
     cce:	43 94       	inc	r4
     cd0:	51 2c       	mov	r5, r1
     cd2:	54 01       	movw	r10, r8
     cd4:	15 c0       	rjmp	.+42     	; 0xd00 <vfprintf+0x13c>
     cd6:	38 01       	movw	r6, r16
     cd8:	f2 e0       	ldi	r31, 0x02	; 2
     cda:	6f 0e       	add	r6, r31
     cdc:	71 1c       	adc	r7, r1
     cde:	f8 01       	movw	r30, r16
     ce0:	a0 80       	ld	r10, Z
     ce2:	b1 80       	ldd	r11, Z+1	; 0x01
     ce4:	26 ff       	sbrs	r18, 6
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <vfprintf+0x12a>
     ce8:	65 2d       	mov	r22, r5
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <vfprintf+0x12e>
     cee:	6f ef       	ldi	r22, 0xFF	; 255
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	c5 01       	movw	r24, r10
     cf4:	2c 87       	std	Y+12, r18	; 0x0c
     cf6:	0e 94 87 0a 	call	0x150e	; 0x150e <strnlen>
     cfa:	2c 01       	movw	r4, r24
     cfc:	83 01       	movw	r16, r6
     cfe:	2c 85       	ldd	r18, Y+12	; 0x0c
     d00:	2f 77       	andi	r18, 0x7F	; 127
     d02:	22 2e       	mov	r2, r18
     d04:	17 c0       	rjmp	.+46     	; 0xd34 <vfprintf+0x170>
     d06:	38 01       	movw	r6, r16
     d08:	f2 e0       	ldi	r31, 0x02	; 2
     d0a:	6f 0e       	add	r6, r31
     d0c:	71 1c       	adc	r7, r1
     d0e:	f8 01       	movw	r30, r16
     d10:	a0 80       	ld	r10, Z
     d12:	b1 80       	ldd	r11, Z+1	; 0x01
     d14:	26 ff       	sbrs	r18, 6
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <vfprintf+0x15a>
     d18:	65 2d       	mov	r22, r5
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x15e>
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	c5 01       	movw	r24, r10
     d24:	2c 87       	std	Y+12, r18	; 0x0c
     d26:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <strnlen_P>
     d2a:	2c 01       	movw	r4, r24
     d2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d2e:	20 68       	ori	r18, 0x80	; 128
     d30:	22 2e       	mov	r2, r18
     d32:	83 01       	movw	r16, r6
     d34:	23 fc       	sbrc	r2, 3
     d36:	1b c0       	rjmp	.+54     	; 0xd6e <vfprintf+0x1aa>
     d38:	83 2d       	mov	r24, r3
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	48 16       	cp	r4, r24
     d3e:	59 06       	cpc	r5, r25
     d40:	b0 f4       	brcc	.+44     	; 0xd6e <vfprintf+0x1aa>
     d42:	b7 01       	movw	r22, r14
     d44:	80 e2       	ldi	r24, 0x20	; 32
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     d4c:	3a 94       	dec	r3
     d4e:	f4 cf       	rjmp	.-24     	; 0xd38 <vfprintf+0x174>
     d50:	f5 01       	movw	r30, r10
     d52:	27 fc       	sbrc	r2, 7
     d54:	85 91       	lpm	r24, Z+
     d56:	27 fe       	sbrs	r2, 7
     d58:	81 91       	ld	r24, Z+
     d5a:	5f 01       	movw	r10, r30
     d5c:	b7 01       	movw	r22, r14
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     d64:	31 10       	cpse	r3, r1
     d66:	3a 94       	dec	r3
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	4f 1a       	sub	r4, r31
     d6c:	51 08       	sbc	r5, r1
     d6e:	41 14       	cp	r4, r1
     d70:	51 04       	cpc	r5, r1
     d72:	71 f7       	brne	.-36     	; 0xd50 <vfprintf+0x18c>
     d74:	e5 c0       	rjmp	.+458    	; 0xf40 <vfprintf+0x37c>
     d76:	84 36       	cpi	r24, 0x64	; 100
     d78:	11 f0       	breq	.+4      	; 0xd7e <vfprintf+0x1ba>
     d7a:	89 36       	cpi	r24, 0x69	; 105
     d7c:	39 f5       	brne	.+78     	; 0xdcc <vfprintf+0x208>
     d7e:	f8 01       	movw	r30, r16
     d80:	27 ff       	sbrs	r18, 7
     d82:	07 c0       	rjmp	.+14     	; 0xd92 <vfprintf+0x1ce>
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	0c 5f       	subi	r16, 0xFC	; 252
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	08 c0       	rjmp	.+16     	; 0xda2 <vfprintf+0x1de>
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	88 27       	eor	r24, r24
     d98:	77 fd       	sbrc	r23, 7
     d9a:	80 95       	com	r24
     d9c:	98 2f       	mov	r25, r24
     d9e:	0e 5f       	subi	r16, 0xFE	; 254
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	2f 76       	andi	r18, 0x6F	; 111
     da4:	b2 2e       	mov	r11, r18
     da6:	97 ff       	sbrs	r25, 7
     da8:	09 c0       	rjmp	.+18     	; 0xdbc <vfprintf+0x1f8>
     daa:	90 95       	com	r25
     dac:	80 95       	com	r24
     dae:	70 95       	com	r23
     db0:	61 95       	neg	r22
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	8f 4f       	sbci	r24, 0xFF	; 255
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	20 68       	ori	r18, 0x80	; 128
     dba:	b2 2e       	mov	r11, r18
     dbc:	2a e0       	ldi	r18, 0x0A	; 10
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	a4 01       	movw	r20, r8
     dc2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__ultoa_invert>
     dc6:	a8 2e       	mov	r10, r24
     dc8:	a8 18       	sub	r10, r8
     dca:	44 c0       	rjmp	.+136    	; 0xe54 <vfprintf+0x290>
     dcc:	85 37       	cpi	r24, 0x75	; 117
     dce:	29 f4       	brne	.+10     	; 0xdda <vfprintf+0x216>
     dd0:	2f 7e       	andi	r18, 0xEF	; 239
     dd2:	b2 2e       	mov	r11, r18
     dd4:	2a e0       	ldi	r18, 0x0A	; 10
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	25 c0       	rjmp	.+74     	; 0xe24 <vfprintf+0x260>
     dda:	f2 2f       	mov	r31, r18
     ddc:	f9 7f       	andi	r31, 0xF9	; 249
     dde:	bf 2e       	mov	r11, r31
     de0:	8f 36       	cpi	r24, 0x6F	; 111
     de2:	c1 f0       	breq	.+48     	; 0xe14 <vfprintf+0x250>
     de4:	18 f4       	brcc	.+6      	; 0xdec <vfprintf+0x228>
     de6:	88 35       	cpi	r24, 0x58	; 88
     de8:	79 f0       	breq	.+30     	; 0xe08 <vfprintf+0x244>
     dea:	b4 c0       	rjmp	.+360    	; 0xf54 <vfprintf+0x390>
     dec:	80 37       	cpi	r24, 0x70	; 112
     dee:	19 f0       	breq	.+6      	; 0xdf6 <vfprintf+0x232>
     df0:	88 37       	cpi	r24, 0x78	; 120
     df2:	21 f0       	breq	.+8      	; 0xdfc <vfprintf+0x238>
     df4:	af c0       	rjmp	.+350    	; 0xf54 <vfprintf+0x390>
     df6:	2f 2f       	mov	r18, r31
     df8:	20 61       	ori	r18, 0x10	; 16
     dfa:	b2 2e       	mov	r11, r18
     dfc:	b4 fe       	sbrs	r11, 4
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <vfprintf+0x256>
     e00:	8b 2d       	mov	r24, r11
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	b8 2e       	mov	r11, r24
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x256>
     e08:	24 ff       	sbrs	r18, 4
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <vfprintf+0x25c>
     e0c:	9f 2f       	mov	r25, r31
     e0e:	96 60       	ori	r25, 0x06	; 6
     e10:	b9 2e       	mov	r11, r25
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x25c>
     e14:	28 e0       	ldi	r18, 0x08	; 8
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <vfprintf+0x260>
     e1a:	20 e1       	ldi	r18, 0x10	; 16
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <vfprintf+0x260>
     e20:	20 e1       	ldi	r18, 0x10	; 16
     e22:	32 e0       	ldi	r19, 0x02	; 2
     e24:	f8 01       	movw	r30, r16
     e26:	b7 fe       	sbrs	r11, 7
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <vfprintf+0x274>
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	0c 5f       	subi	r16, 0xFC	; 252
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x280>
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 5f       	subi	r16, 0xFE	; 254
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	a4 01       	movw	r20, r8
     e46:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__ultoa_invert>
     e4a:	a8 2e       	mov	r10, r24
     e4c:	a8 18       	sub	r10, r8
     e4e:	fb 2d       	mov	r31, r11
     e50:	ff 77       	andi	r31, 0x7F	; 127
     e52:	bf 2e       	mov	r11, r31
     e54:	b6 fe       	sbrs	r11, 6
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <vfprintf+0x2aa>
     e58:	2b 2d       	mov	r18, r11
     e5a:	2e 7f       	andi	r18, 0xFE	; 254
     e5c:	a5 14       	cp	r10, r5
     e5e:	50 f4       	brcc	.+20     	; 0xe74 <vfprintf+0x2b0>
     e60:	b4 fe       	sbrs	r11, 4
     e62:	0a c0       	rjmp	.+20     	; 0xe78 <vfprintf+0x2b4>
     e64:	b2 fc       	sbrc	r11, 2
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <vfprintf+0x2b4>
     e68:	2b 2d       	mov	r18, r11
     e6a:	2e 7e       	andi	r18, 0xEE	; 238
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <vfprintf+0x2b4>
     e6e:	7a 2c       	mov	r7, r10
     e70:	2b 2d       	mov	r18, r11
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <vfprintf+0x2b6>
     e74:	7a 2c       	mov	r7, r10
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <vfprintf+0x2b6>
     e78:	75 2c       	mov	r7, r5
     e7a:	24 ff       	sbrs	r18, 4
     e7c:	0d c0       	rjmp	.+26     	; 0xe98 <vfprintf+0x2d4>
     e7e:	fe 01       	movw	r30, r28
     e80:	ea 0d       	add	r30, r10
     e82:	f1 1d       	adc	r31, r1
     e84:	80 81       	ld	r24, Z
     e86:	80 33       	cpi	r24, 0x30	; 48
     e88:	11 f4       	brne	.+4      	; 0xe8e <vfprintf+0x2ca>
     e8a:	29 7e       	andi	r18, 0xE9	; 233
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <vfprintf+0x2dc>
     e8e:	22 ff       	sbrs	r18, 2
     e90:	06 c0       	rjmp	.+12     	; 0xe9e <vfprintf+0x2da>
     e92:	73 94       	inc	r7
     e94:	73 94       	inc	r7
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <vfprintf+0x2dc>
     e98:	82 2f       	mov	r24, r18
     e9a:	86 78       	andi	r24, 0x86	; 134
     e9c:	09 f0       	breq	.+2      	; 0xea0 <vfprintf+0x2dc>
     e9e:	73 94       	inc	r7
     ea0:	23 fd       	sbrc	r18, 3
     ea2:	13 c0       	rjmp	.+38     	; 0xeca <vfprintf+0x306>
     ea4:	20 ff       	sbrs	r18, 0
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <vfprintf+0x2f0>
     ea8:	5a 2c       	mov	r5, r10
     eaa:	73 14       	cp	r7, r3
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <vfprintf+0x2f0>
     eae:	53 0c       	add	r5, r3
     eb0:	57 18       	sub	r5, r7
     eb2:	73 2c       	mov	r7, r3
     eb4:	73 14       	cp	r7, r3
     eb6:	68 f4       	brcc	.+26     	; 0xed2 <vfprintf+0x30e>
     eb8:	b7 01       	movw	r22, r14
     eba:	80 e2       	ldi	r24, 0x20	; 32
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	2c 87       	std	Y+12, r18	; 0x0c
     ec0:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     ec4:	73 94       	inc	r7
     ec6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec8:	f5 cf       	rjmp	.-22     	; 0xeb4 <vfprintf+0x2f0>
     eca:	73 14       	cp	r7, r3
     ecc:	10 f4       	brcc	.+4      	; 0xed2 <vfprintf+0x30e>
     ece:	37 18       	sub	r3, r7
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <vfprintf+0x310>
     ed2:	31 2c       	mov	r3, r1
     ed4:	24 ff       	sbrs	r18, 4
     ed6:	12 c0       	rjmp	.+36     	; 0xefc <vfprintf+0x338>
     ed8:	b7 01       	movw	r22, r14
     eda:	80 e3       	ldi	r24, 0x30	; 48
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	2c 87       	std	Y+12, r18	; 0x0c
     ee0:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee6:	22 ff       	sbrs	r18, 2
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <vfprintf+0x354>
     eea:	21 ff       	sbrs	r18, 1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <vfprintf+0x330>
     eee:	88 e5       	ldi	r24, 0x58	; 88
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x334>
     ef4:	88 e7       	ldi	r24, 0x78	; 120
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	b7 01       	movw	r22, r14
     efa:	0c c0       	rjmp	.+24     	; 0xf14 <vfprintf+0x350>
     efc:	82 2f       	mov	r24, r18
     efe:	86 78       	andi	r24, 0x86	; 134
     f00:	59 f0       	breq	.+22     	; 0xf18 <vfprintf+0x354>
     f02:	21 fd       	sbrc	r18, 1
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x346>
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <vfprintf+0x348>
     f0a:	8b e2       	ldi	r24, 0x2B	; 43
     f0c:	27 fd       	sbrc	r18, 7
     f0e:	8d e2       	ldi	r24, 0x2D	; 45
     f10:	b7 01       	movw	r22, r14
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     f18:	a5 14       	cp	r10, r5
     f1a:	38 f4       	brcc	.+14     	; 0xf2a <vfprintf+0x366>
     f1c:	b7 01       	movw	r22, r14
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     f26:	5a 94       	dec	r5
     f28:	f7 cf       	rjmp	.-18     	; 0xf18 <vfprintf+0x354>
     f2a:	aa 94       	dec	r10
     f2c:	f4 01       	movw	r30, r8
     f2e:	ea 0d       	add	r30, r10
     f30:	f1 1d       	adc	r31, r1
     f32:	80 81       	ld	r24, Z
     f34:	b7 01       	movw	r22, r14
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     f3c:	a1 10       	cpse	r10, r1
     f3e:	f5 cf       	rjmp	.-22     	; 0xf2a <vfprintf+0x366>
     f40:	33 20       	and	r3, r3
     f42:	09 f4       	brne	.+2      	; 0xf46 <vfprintf+0x382>
     f44:	51 ce       	rjmp	.-862    	; 0xbe8 <vfprintf+0x24>
     f46:	b7 01       	movw	r22, r14
     f48:	80 e2       	ldi	r24, 0x20	; 32
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 5b 05 	call	0xab6	; 0xab6 <fputc>
     f50:	3a 94       	dec	r3
     f52:	f6 cf       	rjmp	.-20     	; 0xf40 <vfprintf+0x37c>
     f54:	f7 01       	movw	r30, r14
     f56:	86 81       	ldd	r24, Z+6	; 0x06
     f58:	97 81       	ldd	r25, Z+7	; 0x07
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x39c>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	2c 96       	adiw	r28, 0x0c	; 12
     f62:	e2 e1       	ldi	r30, 0x12	; 18
     f64:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__epilogue_restores__>

00000f68 <putval>:
     f68:	20 fd       	sbrc	r18, 0
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <putval+0x16>
     f6c:	fc 01       	movw	r30, r24
     f6e:	23 fd       	sbrc	r18, 3
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <putval+0x14>
     f72:	22 ff       	sbrs	r18, 2
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <putval+0x12>
     f76:	73 83       	std	Z+3, r23	; 0x03
     f78:	62 83       	std	Z+2, r22	; 0x02
     f7a:	51 83       	std	Z+1, r21	; 0x01
     f7c:	40 83       	st	Z, r20
     f7e:	08 95       	ret

00000f80 <mulacc>:
     f80:	44 fd       	sbrc	r20, 4
     f82:	10 c0       	rjmp	.+32     	; 0xfa4 <mulacc+0x24>
     f84:	46 fd       	sbrc	r20, 6
     f86:	10 c0       	rjmp	.+32     	; 0xfa8 <mulacc+0x28>
     f88:	db 01       	movw	r26, r22
     f8a:	fc 01       	movw	r30, r24
     f8c:	aa 0f       	add	r26, r26
     f8e:	bb 1f       	adc	r27, r27
     f90:	ee 1f       	adc	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	10 94       	com	r1
     f96:	d1 f7       	brne	.-12     	; 0xf8c <mulacc+0xc>
     f98:	6a 0f       	add	r22, r26
     f9a:	7b 1f       	adc	r23, r27
     f9c:	8e 1f       	adc	r24, r30
     f9e:	9f 1f       	adc	r25, r31
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <mulacc+0x2a>
     fa4:	33 e0       	ldi	r19, 0x03	; 3
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <mulacc+0x2a>
     fa8:	34 e0       	ldi	r19, 0x04	; 4
     faa:	66 0f       	add	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	88 1f       	adc	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	31 50       	subi	r19, 0x01	; 1
     fb4:	d1 f7       	brne	.-12     	; 0xfaa <mulacc+0x2a>
     fb6:	62 0f       	add	r22, r18
     fb8:	71 1d       	adc	r23, r1
     fba:	81 1d       	adc	r24, r1
     fbc:	91 1d       	adc	r25, r1
     fbe:	08 95       	ret

00000fc0 <skip_spaces>:
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	8c 01       	movw	r16, r24
     fca:	c8 01       	movw	r24, r16
     fcc:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
     fd0:	ec 01       	movw	r28, r24
     fd2:	97 fd       	sbrc	r25, 7
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <skip_spaces+0x26>
     fd6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <isspace>
     fda:	89 2b       	or	r24, r25
     fdc:	b1 f7       	brne	.-20     	; 0xfca <skip_spaces+0xa>
     fde:	b8 01       	movw	r22, r16
     fe0:	ce 01       	movw	r24, r28
     fe2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ungetc>
     fe6:	ce 01       	movw	r24, r28
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <conv_int>:
     ff2:	8f 92       	push	r8
     ff4:	9f 92       	push	r9
     ff6:	af 92       	push	r10
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	ec 01       	movw	r28, r24
    100a:	a6 2e       	mov	r10, r22
    100c:	4a 01       	movw	r8, r20
    100e:	02 2f       	mov	r16, r18
    1010:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1014:	ac 01       	movw	r20, r24
    1016:	55 27       	eor	r21, r21
    1018:	4b 32       	cpi	r20, 0x2B	; 43
    101a:	51 05       	cpc	r21, r1
    101c:	21 f0       	breq	.+8      	; 0x1026 <conv_int+0x34>
    101e:	4d 32       	cpi	r20, 0x2D	; 45
    1020:	51 05       	cpc	r21, r1
    1022:	51 f4       	brne	.+20     	; 0x1038 <conv_int+0x46>
    1024:	00 68       	ori	r16, 0x80	; 128
    1026:	aa 94       	dec	r10
    1028:	11 f4       	brne	.+4      	; 0x102e <conv_int+0x3c>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	67 c0       	rjmp	.+206    	; 0x10fc <conv_int+0x10a>
    102e:	ce 01       	movw	r24, r28
    1030:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1034:	97 fd       	sbrc	r25, 7
    1036:	f9 cf       	rjmp	.-14     	; 0x102a <conv_int+0x38>
    1038:	10 2f       	mov	r17, r16
    103a:	1d 7f       	andi	r17, 0xFD	; 253
    103c:	30 2f       	mov	r19, r16
    103e:	30 73       	andi	r19, 0x30	; 48
    1040:	01 f5       	brne	.+64     	; 0x1082 <conv_int+0x90>
    1042:	80 33       	cpi	r24, 0x30	; 48
    1044:	f1 f4       	brne	.+60     	; 0x1082 <conv_int+0x90>
    1046:	ff 24       	eor	r15, r15
    1048:	fa 94       	dec	r15
    104a:	fa 0c       	add	r15, r10
    104c:	09 f4       	brne	.+2      	; 0x1050 <conv_int+0x5e>
    104e:	42 c0       	rjmp	.+132    	; 0x10d4 <conv_int+0xe2>
    1050:	ce 01       	movw	r24, r28
    1052:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1056:	97 fd       	sbrc	r25, 7
    1058:	3d c0       	rjmp	.+122    	; 0x10d4 <conv_int+0xe2>
    105a:	38 2f       	mov	r19, r24
    105c:	3f 7d       	andi	r19, 0xDF	; 223
    105e:	38 35       	cpi	r19, 0x58	; 88
    1060:	51 f4       	brne	.+20     	; 0x1076 <conv_int+0x84>
    1062:	12 64       	ori	r17, 0x42	; 66
    1064:	aa 94       	dec	r10
    1066:	aa 94       	dec	r10
    1068:	a9 f1       	breq	.+106    	; 0x10d4 <conv_int+0xe2>
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1070:	97 ff       	sbrs	r25, 7
    1072:	07 c0       	rjmp	.+14     	; 0x1082 <conv_int+0x90>
    1074:	2f c0       	rjmp	.+94     	; 0x10d4 <conv_int+0xe2>
    1076:	06 ff       	sbrs	r16, 6
    1078:	02 c0       	rjmp	.+4      	; 0x107e <conv_int+0x8c>
    107a:	12 60       	ori	r17, 0x02	; 2
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <conv_int+0x8e>
    107e:	12 61       	ori	r17, 0x12	; 18
    1080:	af 2c       	mov	r10, r15
    1082:	c1 2c       	mov	r12, r1
    1084:	d1 2c       	mov	r13, r1
    1086:	76 01       	movw	r14, r12
    1088:	20 ed       	ldi	r18, 0xD0	; 208
    108a:	28 0f       	add	r18, r24
    108c:	28 30       	cpi	r18, 0x08	; 8
    108e:	80 f0       	brcs	.+32     	; 0x10b0 <conv_int+0xbe>
    1090:	14 ff       	sbrs	r17, 4
    1092:	04 c0       	rjmp	.+8      	; 0x109c <conv_int+0xaa>
    1094:	be 01       	movw	r22, r28
    1096:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ungetc>
    109a:	19 c0       	rjmp	.+50     	; 0x10ce <conv_int+0xdc>
    109c:	2a 30       	cpi	r18, 0x0A	; 10
    109e:	40 f0       	brcs	.+16     	; 0x10b0 <conv_int+0xbe>
    10a0:	16 ff       	sbrs	r17, 6
    10a2:	f8 cf       	rjmp	.-16     	; 0x1094 <conv_int+0xa2>
    10a4:	2f 7d       	andi	r18, 0xDF	; 223
    10a6:	3f ee       	ldi	r19, 0xEF	; 239
    10a8:	32 0f       	add	r19, r18
    10aa:	36 30       	cpi	r19, 0x06	; 6
    10ac:	98 f7       	brcc	.-26     	; 0x1094 <conv_int+0xa2>
    10ae:	27 50       	subi	r18, 0x07	; 7
    10b0:	41 2f       	mov	r20, r17
    10b2:	c7 01       	movw	r24, r14
    10b4:	b6 01       	movw	r22, r12
    10b6:	0e 94 c0 07 	call	0xf80	; 0xf80 <mulacc>
    10ba:	6b 01       	movw	r12, r22
    10bc:	7c 01       	movw	r14, r24
    10be:	12 60       	ori	r17, 0x02	; 2
    10c0:	aa 94       	dec	r10
    10c2:	59 f0       	breq	.+22     	; 0x10da <conv_int+0xe8>
    10c4:	ce 01       	movw	r24, r28
    10c6:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    10ca:	97 ff       	sbrs	r25, 7
    10cc:	dd cf       	rjmp	.-70     	; 0x1088 <conv_int+0x96>
    10ce:	11 fd       	sbrc	r17, 1
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <conv_int+0xe8>
    10d2:	ab cf       	rjmp	.-170    	; 0x102a <conv_int+0x38>
    10d4:	c1 2c       	mov	r12, r1
    10d6:	d1 2c       	mov	r13, r1
    10d8:	76 01       	movw	r14, r12
    10da:	17 ff       	sbrs	r17, 7
    10dc:	08 c0       	rjmp	.+16     	; 0x10ee <conv_int+0xfc>
    10de:	f0 94       	com	r15
    10e0:	e0 94       	com	r14
    10e2:	d0 94       	com	r13
    10e4:	c0 94       	com	r12
    10e6:	c1 1c       	adc	r12, r1
    10e8:	d1 1c       	adc	r13, r1
    10ea:	e1 1c       	adc	r14, r1
    10ec:	f1 1c       	adc	r15, r1
    10ee:	21 2f       	mov	r18, r17
    10f0:	b7 01       	movw	r22, r14
    10f2:	a6 01       	movw	r20, r12
    10f4:	c4 01       	movw	r24, r8
    10f6:	0e 94 b4 07 	call	0xf68	; 0xf68 <putval>
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	af 90       	pop	r10
    110e:	9f 90       	pop	r9
    1110:	8f 90       	pop	r8
    1112:	08 95       	ret

00001114 <conv_brk>:
    1114:	a1 e2       	ldi	r26, 0x21	; 33
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e0 e9       	ldi	r30, 0x90	; 144
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__prologue_saves__+0xa>
    1120:	5c 01       	movw	r10, r24
    1122:	7a 01       	movw	r14, r20
    1124:	8e 01       	movw	r16, r28
    1126:	0f 5f       	subi	r16, 0xFF	; 255
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	68 01       	movw	r12, r16
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	d8 01       	movw	r26, r16
    1130:	1d 92       	st	X+, r1
    1132:	8a 95       	dec	r24
    1134:	e9 f7       	brne	.-6      	; 0x1130 <conv_brk+0x1c>
    1136:	f5 01       	movw	r30, r10
    1138:	73 80       	ldd	r7, Z+3	; 0x03
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	81 2c       	mov	r8, r1
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	91 2c       	mov	r9, r1
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	f9 01       	movw	r30, r18
    114a:	73 fc       	sbrc	r7, 3
    114c:	a5 91       	lpm	r26, Z+
    114e:	73 fe       	sbrs	r7, 3
    1150:	a1 91       	ld	r26, Z+
    1152:	8f 01       	movw	r16, r30
    1154:	7a 2f       	mov	r23, r26
    1156:	9f 01       	movw	r18, r30
    1158:	a1 11       	cpse	r26, r1
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <conv_brk+0x4e>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	7d c0       	rjmp	.+250    	; 0x125c <conv_brk+0x148>
    1162:	ae 35       	cpi	r26, 0x5E	; 94
    1164:	19 f4       	brne	.+6      	; 0x116c <conv_brk+0x58>
    1166:	41 15       	cp	r20, r1
    1168:	51 05       	cpc	r21, r1
    116a:	59 f1       	breq	.+86     	; 0x11c2 <conv_brk+0xae>
    116c:	e9 2d       	mov	r30, r9
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	e4 17       	cp	r30, r20
    1172:	f5 07       	cpc	r31, r21
    1174:	3c f4       	brge	.+14     	; 0x1184 <conv_brk+0x70>
    1176:	ad 35       	cpi	r26, 0x5D	; 93
    1178:	69 f1       	breq	.+90     	; 0x11d4 <conv_brk+0xc0>
    117a:	ad 32       	cpi	r26, 0x2D	; 45
    117c:	19 f4       	brne	.+6      	; 0x1184 <conv_brk+0x70>
    117e:	bb 23       	and	r27, r27
    1180:	19 f1       	breq	.+70     	; 0x11c8 <conv_brk+0xb4>
    1182:	03 c0       	rjmp	.+6      	; 0x118a <conv_brk+0x76>
    1184:	b1 11       	cpse	r27, r1
    1186:	01 c0       	rjmp	.+2      	; 0x118a <conv_brk+0x76>
    1188:	8a 2e       	mov	r8, r26
    118a:	e7 2f       	mov	r30, r23
    118c:	e6 95       	lsr	r30
    118e:	e6 95       	lsr	r30
    1190:	e6 95       	lsr	r30
    1192:	86 01       	movw	r16, r12
    1194:	0e 0f       	add	r16, r30
    1196:	11 1d       	adc	r17, r1
    1198:	f8 01       	movw	r30, r16
    119a:	a7 2f       	mov	r26, r23
    119c:	a7 70       	andi	r26, 0x07	; 7
    119e:	8c 01       	movw	r16, r24
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <conv_brk+0x92>
    11a2:	00 0f       	add	r16, r16
    11a4:	11 1f       	adc	r17, r17
    11a6:	aa 95       	dec	r26
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <conv_brk+0x8e>
    11aa:	d8 01       	movw	r26, r16
    11ac:	b0 81       	ld	r27, Z
    11ae:	ba 2b       	or	r27, r26
    11b0:	b0 83       	st	Z, r27
    11b2:	78 15       	cp	r23, r8
    11b4:	59 f0       	breq	.+22     	; 0x11cc <conv_brk+0xb8>
    11b6:	78 15       	cp	r23, r8
    11b8:	10 f4       	brcc	.+4      	; 0x11be <conv_brk+0xaa>
    11ba:	7f 5f       	subi	r23, 0xFF	; 255
    11bc:	e6 cf       	rjmp	.-52     	; 0x118a <conv_brk+0x76>
    11be:	71 50       	subi	r23, 0x01	; 1
    11c0:	e4 cf       	rjmp	.-56     	; 0x118a <conv_brk+0x76>
    11c2:	99 24       	eor	r9, r9
    11c4:	93 94       	inc	r9
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <conv_brk+0xba>
    11c8:	b1 e0       	ldi	r27, 0x01	; 1
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <conv_brk+0xba>
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	4f 5f       	subi	r20, 0xFF	; 255
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	ba cf       	rjmp	.-140    	; 0x1148 <conv_brk+0x34>
    11d4:	bb 23       	and	r27, r27
    11d6:	19 f0       	breq	.+6      	; 0x11de <conv_brk+0xca>
    11d8:	8e 81       	ldd	r24, Y+6	; 0x06
    11da:	80 62       	ori	r24, 0x20	; 32
    11dc:	8e 83       	std	Y+6, r24	; 0x06
    11de:	91 10       	cpse	r9, r1
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <conv_brk+0xd4>
    11e2:	99 24       	eor	r9, r9
    11e4:	93 94       	inc	r9
    11e6:	15 c0       	rjmp	.+42     	; 0x1212 <conv_brk+0xfe>
    11e8:	f6 01       	movw	r30, r12
    11ea:	ce 01       	movw	r24, r28
    11ec:	81 96       	adiw	r24, 0x21	; 33
    11ee:	20 81       	ld	r18, Z
    11f0:	20 95       	com	r18
    11f2:	21 93       	st	Z+, r18
    11f4:	e8 17       	cp	r30, r24
    11f6:	f9 07       	cpc	r31, r25
    11f8:	d1 f7       	brne	.-12     	; 0x11ee <conv_brk+0xda>
    11fa:	f3 cf       	rjmp	.-26     	; 0x11e2 <conv_brk+0xce>
    11fc:	e1 14       	cp	r14, r1
    11fe:	f1 04       	cpc	r15, r1
    1200:	29 f0       	breq	.+10     	; 0x120c <conv_brk+0xf8>
    1202:	d7 01       	movw	r26, r14
    1204:	8c 93       	st	X, r24
    1206:	f7 01       	movw	r30, r14
    1208:	31 96       	adiw	r30, 0x01	; 1
    120a:	7f 01       	movw	r14, r30
    120c:	61 50       	subi	r22, 0x01	; 1
    120e:	01 f1       	breq	.+64     	; 0x1250 <conv_brk+0x13c>
    1210:	91 2c       	mov	r9, r1
    1212:	c5 01       	movw	r24, r10
    1214:	69 a3       	std	Y+33, r22	; 0x21
    1216:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    121a:	69 a1       	ldd	r22, Y+33	; 0x21
    121c:	97 fd       	sbrc	r25, 7
    121e:	16 c0       	rjmp	.+44     	; 0x124c <conv_brk+0x138>
    1220:	28 2f       	mov	r18, r24
    1222:	26 95       	lsr	r18
    1224:	26 95       	lsr	r18
    1226:	26 95       	lsr	r18
    1228:	f6 01       	movw	r30, r12
    122a:	e2 0f       	add	r30, r18
    122c:	f1 1d       	adc	r31, r1
    122e:	20 81       	ld	r18, Z
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	ac 01       	movw	r20, r24
    1234:	47 70       	andi	r20, 0x07	; 7
    1236:	55 27       	eor	r21, r21
    1238:	02 c0       	rjmp	.+4      	; 0x123e <conv_brk+0x12a>
    123a:	35 95       	asr	r19
    123c:	27 95       	ror	r18
    123e:	4a 95       	dec	r20
    1240:	e2 f7       	brpl	.-8      	; 0x123a <conv_brk+0x126>
    1242:	20 fd       	sbrc	r18, 0
    1244:	db cf       	rjmp	.-74     	; 0x11fc <conv_brk+0xe8>
    1246:	b5 01       	movw	r22, r10
    1248:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ungetc>
    124c:	91 10       	cpse	r9, r1
    124e:	86 cf       	rjmp	.-244    	; 0x115c <conv_brk+0x48>
    1250:	e1 14       	cp	r14, r1
    1252:	f1 04       	cpc	r15, r1
    1254:	11 f0       	breq	.+4      	; 0x125a <conv_brk+0x146>
    1256:	d7 01       	movw	r26, r14
    1258:	1c 92       	st	X, r1
    125a:	c8 01       	movw	r24, r16
    125c:	a1 96       	adiw	r28, 0x21	; 33
    125e:	ed e0       	ldi	r30, 0x0D	; 13
    1260:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__epilogue_restores__+0xa>

00001264 <vfscanf>:
    1264:	4f 92       	push	r4
    1266:	5f 92       	push	r5
    1268:	7f 92       	push	r7
    126a:	8f 92       	push	r8
    126c:	9f 92       	push	r9
    126e:	af 92       	push	r10
    1270:	bf 92       	push	r11
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	1f 92       	push	r1
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	8c 01       	movw	r16, r24
    128a:	2b 01       	movw	r4, r22
    128c:	7a 01       	movw	r14, r20
    128e:	fc 01       	movw	r30, r24
    1290:	17 82       	std	Z+7, r1	; 0x07
    1292:	16 82       	std	Z+6, r1	; 0x06
    1294:	a1 2c       	mov	r10, r1
    1296:	f8 01       	movw	r30, r16
    1298:	d3 80       	ldd	r13, Z+3	; 0x03
    129a:	f2 01       	movw	r30, r4
    129c:	d3 fc       	sbrc	r13, 3
    129e:	85 91       	lpm	r24, Z+
    12a0:	d3 fe       	sbrs	r13, 3
    12a2:	81 91       	ld	r24, Z+
    12a4:	38 2f       	mov	r19, r24
    12a6:	2f 01       	movw	r4, r30
    12a8:	88 23       	and	r24, r24
    12aa:	09 f4       	brne	.+2      	; 0x12ae <vfscanf+0x4a>
    12ac:	fc c0       	rjmp	.+504    	; 0x14a6 <vfscanf+0x242>
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	39 83       	std	Y+1, r19	; 0x01
    12b2:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <isspace>
    12b6:	39 81       	ldd	r19, Y+1	; 0x01
    12b8:	89 2b       	or	r24, r25
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <vfscanf+0x60>
    12bc:	c8 01       	movw	r24, r16
    12be:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <skip_spaces>
    12c2:	e9 cf       	rjmp	.-46     	; 0x1296 <vfscanf+0x32>
    12c4:	35 32       	cpi	r19, 0x25	; 37
    12c6:	41 f4       	brne	.+16     	; 0x12d8 <vfscanf+0x74>
    12c8:	f2 01       	movw	r30, r4
    12ca:	d3 fc       	sbrc	r13, 3
    12cc:	35 91       	lpm	r19, Z+
    12ce:	d3 fe       	sbrs	r13, 3
    12d0:	31 91       	ld	r19, Z+
    12d2:	2f 01       	movw	r4, r30
    12d4:	35 32       	cpi	r19, 0x25	; 37
    12d6:	69 f4       	brne	.+26     	; 0x12f2 <vfscanf+0x8e>
    12d8:	c8 01       	movw	r24, r16
    12da:	39 83       	std	Y+1, r19	; 0x01
    12dc:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    12e0:	39 81       	ldd	r19, Y+1	; 0x01
    12e2:	97 fd       	sbrc	r25, 7
    12e4:	de c0       	rjmp	.+444    	; 0x14a2 <vfscanf+0x23e>
    12e6:	38 17       	cp	r19, r24
    12e8:	b1 f2       	breq	.-84     	; 0x1296 <vfscanf+0x32>
    12ea:	b8 01       	movw	r22, r16
    12ec:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ungetc>
    12f0:	da c0       	rjmp	.+436    	; 0x14a6 <vfscanf+0x242>
    12f2:	3a 32       	cpi	r19, 0x2A	; 42
    12f4:	41 f4       	brne	.+16     	; 0x1306 <vfscanf+0xa2>
    12f6:	d3 fc       	sbrc	r13, 3
    12f8:	35 91       	lpm	r19, Z+
    12fa:	d3 fe       	sbrs	r13, 3
    12fc:	31 91       	ld	r19, Z+
    12fe:	2f 01       	movw	r4, r30
    1300:	bb 24       	eor	r11, r11
    1302:	b3 94       	inc	r11
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <vfscanf+0xa4>
    1306:	b1 2c       	mov	r11, r1
    1308:	71 2c       	mov	r7, r1
    130a:	20 ed       	ldi	r18, 0xD0	; 208
    130c:	23 0f       	add	r18, r19
    130e:	2a 30       	cpi	r18, 0x0A	; 10
    1310:	90 f4       	brcc	.+36     	; 0x1336 <vfscanf+0xd2>
    1312:	fb 2d       	mov	r31, r11
    1314:	f2 60       	ori	r31, 0x02	; 2
    1316:	bf 2e       	mov	r11, r31
    1318:	67 2d       	mov	r22, r7
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	0e 94 c0 07 	call	0xf80	; 0xf80 <mulacc>
    1326:	76 2e       	mov	r7, r22
    1328:	f2 01       	movw	r30, r4
    132a:	d3 fc       	sbrc	r13, 3
    132c:	35 91       	lpm	r19, Z+
    132e:	d3 fe       	sbrs	r13, 3
    1330:	31 91       	ld	r19, Z+
    1332:	2f 01       	movw	r4, r30
    1334:	ea cf       	rjmp	.-44     	; 0x130a <vfscanf+0xa6>
    1336:	b1 fe       	sbrs	r11, 1
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <vfscanf+0xdc>
    133a:	71 10       	cpse	r7, r1
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <vfscanf+0xe0>
    133e:	b3 c0       	rjmp	.+358    	; 0x14a6 <vfscanf+0x242>
    1340:	77 24       	eor	r7, r7
    1342:	7a 94       	dec	r7
    1344:	38 36       	cpi	r19, 0x68	; 104
    1346:	19 f0       	breq	.+6      	; 0x134e <vfscanf+0xea>
    1348:	3c 36       	cpi	r19, 0x6C	; 108
    134a:	61 f0       	breq	.+24     	; 0x1364 <vfscanf+0x100>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <vfscanf+0x112>
    134e:	f2 01       	movw	r30, r4
    1350:	d3 fc       	sbrc	r13, 3
    1352:	35 91       	lpm	r19, Z+
    1354:	d3 fe       	sbrs	r13, 3
    1356:	31 91       	ld	r19, Z+
    1358:	2f 01       	movw	r4, r30
    135a:	38 36       	cpi	r19, 0x68	; 104
    135c:	61 f4       	brne	.+24     	; 0x1376 <vfscanf+0x112>
    135e:	fb 2d       	mov	r31, r11
    1360:	f8 60       	ori	r31, 0x08	; 8
    1362:	bf 2e       	mov	r11, r31
    1364:	8b 2d       	mov	r24, r11
    1366:	84 60       	ori	r24, 0x04	; 4
    1368:	b8 2e       	mov	r11, r24
    136a:	f2 01       	movw	r30, r4
    136c:	d3 fc       	sbrc	r13, 3
    136e:	35 91       	lpm	r19, Z+
    1370:	d3 fe       	sbrs	r13, 3
    1372:	31 91       	ld	r19, Z+
    1374:	2f 01       	movw	r4, r30
    1376:	33 23       	and	r19, r19
    1378:	09 f4       	brne	.+2      	; 0x137c <vfscanf+0x118>
    137a:	95 c0       	rjmp	.+298    	; 0x14a6 <vfscanf+0x242>
    137c:	63 2f       	mov	r22, r19
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	88 e6       	ldi	r24, 0x68	; 104
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	39 83       	std	Y+1, r19	; 0x01
    1386:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strchr_P>
    138a:	39 81       	ldd	r19, Y+1	; 0x01
    138c:	89 2b       	or	r24, r25
    138e:	09 f4       	brne	.+2      	; 0x1392 <vfscanf+0x12e>
    1390:	8a c0       	rjmp	.+276    	; 0x14a6 <vfscanf+0x242>
    1392:	b0 fc       	sbrc	r11, 0
    1394:	07 c0       	rjmp	.+14     	; 0x13a4 <vfscanf+0x140>
    1396:	f7 01       	movw	r30, r14
    1398:	c0 80       	ld	r12, Z
    139a:	d1 80       	ldd	r13, Z+1	; 0x01
    139c:	c7 01       	movw	r24, r14
    139e:	02 96       	adiw	r24, 0x02	; 2
    13a0:	7c 01       	movw	r14, r24
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vfscanf+0x144>
    13a4:	c1 2c       	mov	r12, r1
    13a6:	d1 2c       	mov	r13, r1
    13a8:	3e 36       	cpi	r19, 0x6E	; 110
    13aa:	51 f4       	brne	.+20     	; 0x13c0 <vfscanf+0x15c>
    13ac:	f8 01       	movw	r30, r16
    13ae:	46 81       	ldd	r20, Z+6	; 0x06
    13b0:	57 81       	ldd	r21, Z+7	; 0x07
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	2b 2d       	mov	r18, r11
    13b8:	c6 01       	movw	r24, r12
    13ba:	0e 94 b4 07 	call	0xf68	; 0xf68 <putval>
    13be:	6b cf       	rjmp	.-298    	; 0x1296 <vfscanf+0x32>
    13c0:	33 36       	cpi	r19, 0x63	; 99
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <vfscanf+0x188>
    13c4:	b1 fc       	sbrc	r11, 1
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfscanf+0x168>
    13c8:	77 24       	eor	r7, r7
    13ca:	73 94       	inc	r7
    13cc:	c8 01       	movw	r24, r16
    13ce:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    13d2:	97 fd       	sbrc	r25, 7
    13d4:	66 c0       	rjmp	.+204    	; 0x14a2 <vfscanf+0x23e>
    13d6:	c1 14       	cp	r12, r1
    13d8:	d1 04       	cpc	r13, r1
    13da:	29 f0       	breq	.+10     	; 0x13e6 <vfscanf+0x182>
    13dc:	f6 01       	movw	r30, r12
    13de:	80 83       	st	Z, r24
    13e0:	c6 01       	movw	r24, r12
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	6c 01       	movw	r12, r24
    13e6:	7a 94       	dec	r7
    13e8:	89 f7       	brne	.-30     	; 0x13cc <vfscanf+0x168>
    13ea:	57 c0       	rjmp	.+174    	; 0x149a <vfscanf+0x236>
    13ec:	3b 35       	cpi	r19, 0x5B	; 91
    13ee:	59 f4       	brne	.+22     	; 0x1406 <vfscanf+0x1a2>
    13f0:	92 01       	movw	r18, r4
    13f2:	a6 01       	movw	r20, r12
    13f4:	67 2d       	mov	r22, r7
    13f6:	c8 01       	movw	r24, r16
    13f8:	0e 94 8a 08 	call	0x1114	; 0x1114 <conv_brk>
    13fc:	2c 01       	movw	r4, r24
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	09 f0       	breq	.+2      	; 0x1404 <vfscanf+0x1a0>
    1402:	4b c0       	rjmp	.+150    	; 0x149a <vfscanf+0x236>
    1404:	45 c0       	rjmp	.+138    	; 0x1490 <vfscanf+0x22c>
    1406:	c8 01       	movw	r24, r16
    1408:	39 83       	std	Y+1, r19	; 0x01
    140a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <skip_spaces>
    140e:	39 81       	ldd	r19, Y+1	; 0x01
    1410:	97 fd       	sbrc	r25, 7
    1412:	47 c0       	rjmp	.+142    	; 0x14a2 <vfscanf+0x23e>
    1414:	3f 36       	cpi	r19, 0x6F	; 111
    1416:	69 f1       	breq	.+90     	; 0x1472 <vfscanf+0x20e>
    1418:	28 f4       	brcc	.+10     	; 0x1424 <vfscanf+0x1c0>
    141a:	34 36       	cpi	r19, 0x64	; 100
    141c:	31 f1       	breq	.+76     	; 0x146a <vfscanf+0x206>
    141e:	39 36       	cpi	r19, 0x69	; 105
    1420:	79 f1       	breq	.+94     	; 0x1480 <vfscanf+0x21c>
    1422:	2b c0       	rjmp	.+86     	; 0x147a <vfscanf+0x216>
    1424:	33 37       	cpi	r19, 0x73	; 115
    1426:	69 f0       	breq	.+26     	; 0x1442 <vfscanf+0x1de>
    1428:	35 37       	cpi	r19, 0x75	; 117
    142a:	f9 f0       	breq	.+62     	; 0x146a <vfscanf+0x206>
    142c:	26 c0       	rjmp	.+76     	; 0x147a <vfscanf+0x216>
    142e:	c1 14       	cp	r12, r1
    1430:	d1 04       	cpc	r13, r1
    1432:	29 f0       	breq	.+10     	; 0x143e <vfscanf+0x1da>
    1434:	f6 01       	movw	r30, r12
    1436:	80 82       	st	Z, r8
    1438:	c6 01       	movw	r24, r12
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	6c 01       	movw	r12, r24
    143e:	7a 94       	dec	r7
    1440:	71 f0       	breq	.+28     	; 0x145e <vfscanf+0x1fa>
    1442:	c8 01       	movw	r24, r16
    1444:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1448:	4c 01       	movw	r8, r24
    144a:	97 fd       	sbrc	r25, 7
    144c:	08 c0       	rjmp	.+16     	; 0x145e <vfscanf+0x1fa>
    144e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <isspace>
    1452:	89 2b       	or	r24, r25
    1454:	61 f3       	breq	.-40     	; 0x142e <vfscanf+0x1ca>
    1456:	b8 01       	movw	r22, r16
    1458:	c4 01       	movw	r24, r8
    145a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <ungetc>
    145e:	c1 14       	cp	r12, r1
    1460:	d1 04       	cpc	r13, r1
    1462:	d9 f0       	breq	.+54     	; 0x149a <vfscanf+0x236>
    1464:	f6 01       	movw	r30, r12
    1466:	10 82       	st	Z, r1
    1468:	18 c0       	rjmp	.+48     	; 0x149a <vfscanf+0x236>
    146a:	fb 2d       	mov	r31, r11
    146c:	f0 62       	ori	r31, 0x20	; 32
    146e:	bf 2e       	mov	r11, r31
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <vfscanf+0x21c>
    1472:	8b 2d       	mov	r24, r11
    1474:	80 61       	ori	r24, 0x10	; 16
    1476:	b8 2e       	mov	r11, r24
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <vfscanf+0x21c>
    147a:	9b 2d       	mov	r25, r11
    147c:	90 64       	ori	r25, 0x40	; 64
    147e:	b9 2e       	mov	r11, r25
    1480:	2b 2d       	mov	r18, r11
    1482:	a6 01       	movw	r20, r12
    1484:	67 2d       	mov	r22, r7
    1486:	c8 01       	movw	r24, r16
    1488:	0e 94 f9 07 	call	0xff2	; 0xff2 <conv_int>
    148c:	81 11       	cpse	r24, r1
    148e:	05 c0       	rjmp	.+10     	; 0x149a <vfscanf+0x236>
    1490:	f8 01       	movw	r30, r16
    1492:	83 81       	ldd	r24, Z+3	; 0x03
    1494:	80 73       	andi	r24, 0x30	; 48
    1496:	29 f4       	brne	.+10     	; 0x14a2 <vfscanf+0x23e>
    1498:	06 c0       	rjmp	.+12     	; 0x14a6 <vfscanf+0x242>
    149a:	b0 fc       	sbrc	r11, 0
    149c:	fc ce       	rjmp	.-520    	; 0x1296 <vfscanf+0x32>
    149e:	a3 94       	inc	r10
    14a0:	fa ce       	rjmp	.-524    	; 0x1296 <vfscanf+0x32>
    14a2:	aa 20       	and	r10, r10
    14a4:	19 f0       	breq	.+6      	; 0x14ac <vfscanf+0x248>
    14a6:	8a 2d       	mov	r24, r10
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfscanf+0x24c>
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	0f 90       	pop	r0
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	bf 90       	pop	r11
    14c4:	af 90       	pop	r10
    14c6:	9f 90       	pop	r9
    14c8:	8f 90       	pop	r8
    14ca:	7f 90       	pop	r7
    14cc:	5f 90       	pop	r5
    14ce:	4f 90       	pop	r4
    14d0:	08 95       	ret

000014d2 <isspace>:
    14d2:	91 11       	cpse	r25, r1
    14d4:	dc c0       	rjmp	.+440    	; 0x168e <__ctype_isfalse>
    14d6:	80 32       	cpi	r24, 0x20	; 32
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <isspace+0xe>
    14da:	89 50       	subi	r24, 0x09	; 9
    14dc:	85 50       	subi	r24, 0x05	; 5
    14de:	d0 f7       	brcc	.-12     	; 0x14d4 <isspace+0x2>
    14e0:	08 95       	ret

000014e2 <strchr_P>:
    14e2:	fc 01       	movw	r30, r24
    14e4:	05 90       	lpm	r0, Z+
    14e6:	06 16       	cp	r0, r22
    14e8:	21 f0       	breq	.+8      	; 0x14f2 <strchr_P+0x10>
    14ea:	00 20       	and	r0, r0
    14ec:	d9 f7       	brne	.-10     	; 0x14e4 <strchr_P+0x2>
    14ee:	c0 01       	movw	r24, r0
    14f0:	08 95       	ret
    14f2:	31 97       	sbiw	r30, 0x01	; 1
    14f4:	cf 01       	movw	r24, r30
    14f6:	08 95       	ret

000014f8 <strnlen_P>:
    14f8:	fc 01       	movw	r30, r24
    14fa:	05 90       	lpm	r0, Z+
    14fc:	61 50       	subi	r22, 0x01	; 1
    14fe:	70 40       	sbci	r23, 0x00	; 0
    1500:	01 10       	cpse	r0, r1
    1502:	d8 f7       	brcc	.-10     	; 0x14fa <strnlen_P+0x2>
    1504:	80 95       	com	r24
    1506:	90 95       	com	r25
    1508:	8e 0f       	add	r24, r30
    150a:	9f 1f       	adc	r25, r31
    150c:	08 95       	ret

0000150e <strnlen>:
    150e:	fc 01       	movw	r30, r24
    1510:	61 50       	subi	r22, 0x01	; 1
    1512:	70 40       	sbci	r23, 0x00	; 0
    1514:	01 90       	ld	r0, Z+
    1516:	01 10       	cpse	r0, r1
    1518:	d8 f7       	brcc	.-10     	; 0x1510 <strnlen+0x2>
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	8e 0f       	add	r24, r30
    1520:	9f 1f       	adc	r25, r31
    1522:	08 95       	ret

00001524 <fgetc>:
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	20 ff       	sbrs	r18, 0
    152e:	33 c0       	rjmp	.+102    	; 0x1596 <fgetc+0x72>
    1530:	26 ff       	sbrs	r18, 6
    1532:	0a c0       	rjmp	.+20     	; 0x1548 <fgetc+0x24>
    1534:	2f 7b       	andi	r18, 0xBF	; 191
    1536:	2b 83       	std	Y+3, r18	; 0x03
    1538:	8e 81       	ldd	r24, Y+6	; 0x06
    153a:	9f 81       	ldd	r25, Y+7	; 0x07
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	9f 83       	std	Y+7, r25	; 0x07
    1540:	8e 83       	std	Y+6, r24	; 0x06
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	29 c0       	rjmp	.+82     	; 0x159a <fgetc+0x76>
    1548:	22 ff       	sbrs	r18, 2
    154a:	0f c0       	rjmp	.+30     	; 0x156a <fgetc+0x46>
    154c:	e8 81       	ld	r30, Y
    154e:	f9 81       	ldd	r31, Y+1	; 0x01
    1550:	80 81       	ld	r24, Z
    1552:	99 27       	eor	r25, r25
    1554:	87 fd       	sbrc	r24, 7
    1556:	90 95       	com	r25
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	19 f4       	brne	.+6      	; 0x1562 <fgetc+0x3e>
    155c:	20 62       	ori	r18, 0x20	; 32
    155e:	2b 83       	std	Y+3, r18	; 0x03
    1560:	1a c0       	rjmp	.+52     	; 0x1596 <fgetc+0x72>
    1562:	31 96       	adiw	r30, 0x01	; 1
    1564:	f9 83       	std	Y+1, r31	; 0x01
    1566:	e8 83       	st	Y, r30
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <fgetc+0x62>
    156a:	ea 85       	ldd	r30, Y+10	; 0x0a
    156c:	fb 85       	ldd	r31, Y+11	; 0x0b
    156e:	09 95       	icall
    1570:	97 ff       	sbrs	r25, 7
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <fgetc+0x62>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	11 f4       	brne	.+4      	; 0x157e <fgetc+0x5a>
    157a:	80 e1       	ldi	r24, 0x10	; 16
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <fgetc+0x5c>
    157e:	80 e2       	ldi	r24, 0x20	; 32
    1580:	82 2b       	or	r24, r18
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <fgetc+0x72>
    1586:	2e 81       	ldd	r18, Y+6	; 0x06
    1588:	3f 81       	ldd	r19, Y+7	; 0x07
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	3f 83       	std	Y+7, r19	; 0x07
    1590:	2e 83       	std	Y+6, r18	; 0x06
    1592:	99 27       	eor	r25, r25
    1594:	02 c0       	rjmp	.+4      	; 0x159a <fgetc+0x76>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <ungetc>:
    15a0:	fb 01       	movw	r30, r22
    15a2:	23 81       	ldd	r18, Z+3	; 0x03
    15a4:	20 ff       	sbrs	r18, 0
    15a6:	12 c0       	rjmp	.+36     	; 0x15cc <ungetc+0x2c>
    15a8:	26 fd       	sbrc	r18, 6
    15aa:	10 c0       	rjmp	.+32     	; 0x15cc <ungetc+0x2c>
    15ac:	8f 3f       	cpi	r24, 0xFF	; 255
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	93 07       	cpc	r25, r19
    15b2:	61 f0       	breq	.+24     	; 0x15cc <ungetc+0x2c>
    15b4:	82 83       	std	Z+2, r24	; 0x02
    15b6:	2f 7d       	andi	r18, 0xDF	; 223
    15b8:	20 64       	ori	r18, 0x40	; 64
    15ba:	23 83       	std	Z+3, r18	; 0x03
    15bc:	26 81       	ldd	r18, Z+6	; 0x06
    15be:	37 81       	ldd	r19, Z+7	; 0x07
    15c0:	21 50       	subi	r18, 0x01	; 1
    15c2:	31 09       	sbc	r19, r1
    15c4:	37 83       	std	Z+7, r19	; 0x07
    15c6:	26 83       	std	Z+6, r18	; 0x06
    15c8:	99 27       	eor	r25, r25
    15ca:	08 95       	ret
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	9f ef       	ldi	r25, 0xFF	; 255
    15d0:	08 95       	ret

000015d2 <__ultoa_invert>:
    15d2:	fa 01       	movw	r30, r20
    15d4:	aa 27       	eor	r26, r26
    15d6:	28 30       	cpi	r18, 0x08	; 8
    15d8:	51 f1       	breq	.+84     	; 0x162e <__ultoa_invert+0x5c>
    15da:	20 31       	cpi	r18, 0x10	; 16
    15dc:	81 f1       	breq	.+96     	; 0x163e <__ultoa_invert+0x6c>
    15de:	e8 94       	clt
    15e0:	6f 93       	push	r22
    15e2:	6e 7f       	andi	r22, 0xFE	; 254
    15e4:	6e 5f       	subi	r22, 0xFE	; 254
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	af 4f       	sbci	r26, 0xFF	; 255
    15ee:	b1 e0       	ldi	r27, 0x01	; 1
    15f0:	3e d0       	rcall	.+124    	; 0x166e <__ultoa_invert+0x9c>
    15f2:	b4 e0       	ldi	r27, 0x04	; 4
    15f4:	3c d0       	rcall	.+120    	; 0x166e <__ultoa_invert+0x9c>
    15f6:	67 0f       	add	r22, r23
    15f8:	78 1f       	adc	r23, r24
    15fa:	89 1f       	adc	r24, r25
    15fc:	9a 1f       	adc	r25, r26
    15fe:	a1 1d       	adc	r26, r1
    1600:	68 0f       	add	r22, r24
    1602:	79 1f       	adc	r23, r25
    1604:	8a 1f       	adc	r24, r26
    1606:	91 1d       	adc	r25, r1
    1608:	a1 1d       	adc	r26, r1
    160a:	6a 0f       	add	r22, r26
    160c:	71 1d       	adc	r23, r1
    160e:	81 1d       	adc	r24, r1
    1610:	91 1d       	adc	r25, r1
    1612:	a1 1d       	adc	r26, r1
    1614:	20 d0       	rcall	.+64     	; 0x1656 <__ultoa_invert+0x84>
    1616:	09 f4       	brne	.+2      	; 0x161a <__ultoa_invert+0x48>
    1618:	68 94       	set
    161a:	3f 91       	pop	r19
    161c:	2a e0       	ldi	r18, 0x0A	; 10
    161e:	26 9f       	mul	r18, r22
    1620:	11 24       	eor	r1, r1
    1622:	30 19       	sub	r19, r0
    1624:	30 5d       	subi	r19, 0xD0	; 208
    1626:	31 93       	st	Z+, r19
    1628:	de f6       	brtc	.-74     	; 0x15e0 <__ultoa_invert+0xe>
    162a:	cf 01       	movw	r24, r30
    162c:	08 95       	ret
    162e:	46 2f       	mov	r20, r22
    1630:	47 70       	andi	r20, 0x07	; 7
    1632:	40 5d       	subi	r20, 0xD0	; 208
    1634:	41 93       	st	Z+, r20
    1636:	b3 e0       	ldi	r27, 0x03	; 3
    1638:	0f d0       	rcall	.+30     	; 0x1658 <__ultoa_invert+0x86>
    163a:	c9 f7       	brne	.-14     	; 0x162e <__ultoa_invert+0x5c>
    163c:	f6 cf       	rjmp	.-20     	; 0x162a <__ultoa_invert+0x58>
    163e:	46 2f       	mov	r20, r22
    1640:	4f 70       	andi	r20, 0x0F	; 15
    1642:	40 5d       	subi	r20, 0xD0	; 208
    1644:	4a 33       	cpi	r20, 0x3A	; 58
    1646:	18 f0       	brcs	.+6      	; 0x164e <__ultoa_invert+0x7c>
    1648:	49 5d       	subi	r20, 0xD9	; 217
    164a:	31 fd       	sbrc	r19, 1
    164c:	40 52       	subi	r20, 0x20	; 32
    164e:	41 93       	st	Z+, r20
    1650:	02 d0       	rcall	.+4      	; 0x1656 <__ultoa_invert+0x84>
    1652:	a9 f7       	brne	.-22     	; 0x163e <__ultoa_invert+0x6c>
    1654:	ea cf       	rjmp	.-44     	; 0x162a <__ultoa_invert+0x58>
    1656:	b4 e0       	ldi	r27, 0x04	; 4
    1658:	a6 95       	lsr	r26
    165a:	97 95       	ror	r25
    165c:	87 95       	ror	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	ba 95       	dec	r27
    1664:	c9 f7       	brne	.-14     	; 0x1658 <__ultoa_invert+0x86>
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	61 05       	cpc	r22, r1
    166a:	71 05       	cpc	r23, r1
    166c:	08 95       	ret
    166e:	9b 01       	movw	r18, r22
    1670:	ac 01       	movw	r20, r24
    1672:	0a 2e       	mov	r0, r26
    1674:	06 94       	lsr	r0
    1676:	57 95       	ror	r21
    1678:	47 95       	ror	r20
    167a:	37 95       	ror	r19
    167c:	27 95       	ror	r18
    167e:	ba 95       	dec	r27
    1680:	c9 f7       	brne	.-14     	; 0x1674 <__ultoa_invert+0xa2>
    1682:	62 0f       	add	r22, r18
    1684:	73 1f       	adc	r23, r19
    1686:	84 1f       	adc	r24, r20
    1688:	95 1f       	adc	r25, r21
    168a:	a0 1d       	adc	r26, r0
    168c:	08 95       	ret

0000168e <__ctype_isfalse>:
    168e:	99 27       	eor	r25, r25
    1690:	88 27       	eor	r24, r24

00001692 <__ctype_istrue>:
    1692:	08 95       	ret

00001694 <__prologue_saves__>:
    1694:	2f 92       	push	r2
    1696:	3f 92       	push	r3
    1698:	4f 92       	push	r4
    169a:	5f 92       	push	r5
    169c:	6f 92       	push	r6
    169e:	7f 92       	push	r7
    16a0:	8f 92       	push	r8
    16a2:	9f 92       	push	r9
    16a4:	af 92       	push	r10
    16a6:	bf 92       	push	r11
    16a8:	cf 92       	push	r12
    16aa:	df 92       	push	r13
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	ca 1b       	sub	r28, r26
    16be:	db 0b       	sbc	r29, r27
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	09 94       	ijmp

000016cc <__epilogue_restores__>:
    16cc:	2a 88       	ldd	r2, Y+18	; 0x12
    16ce:	39 88       	ldd	r3, Y+17	; 0x11
    16d0:	48 88       	ldd	r4, Y+16	; 0x10
    16d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    16d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    16d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    16d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    16da:	9b 84       	ldd	r9, Y+11	; 0x0b
    16dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    16de:	b9 84       	ldd	r11, Y+9	; 0x09
    16e0:	c8 84       	ldd	r12, Y+8	; 0x08
    16e2:	df 80       	ldd	r13, Y+7	; 0x07
    16e4:	ee 80       	ldd	r14, Y+6	; 0x06
    16e6:	fd 80       	ldd	r15, Y+5	; 0x05
    16e8:	0c 81       	ldd	r16, Y+4	; 0x04
    16ea:	1b 81       	ldd	r17, Y+3	; 0x03
    16ec:	aa 81       	ldd	r26, Y+2	; 0x02
    16ee:	b9 81       	ldd	r27, Y+1	; 0x01
    16f0:	ce 0f       	add	r28, r30
    16f2:	d1 1d       	adc	r29, r1
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	ed 01       	movw	r28, r26
    1700:	08 95       	ret

00001702 <_exit>:
    1702:	f8 94       	cli

00001704 <__stop_program>:
    1704:	ff cf       	rjmp	.-2      	; 0x1704 <__stop_program>
