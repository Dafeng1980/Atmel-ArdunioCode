
Gcc_ButtonPress.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000016e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000202  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017a  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000ba  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000110  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000138  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000188  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_clear_bss>:
  68:	21 e0       	ldi	r18, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a5 30       	cpi	r26, 0x05	; 5
  74:	b2 07       	cpc	r27, r18
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  7c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <ButtonPressed>:
char Pressed[numberOfButtons];
int Pressed_Confidence_Level[numberOfButtons]; //Measure button press confidence
int Released_Confidence_Level[numberOfButtons]; //Measure button release confidence

char ButtonPressed(int buttonNumber, unsigned char pinOfButton, unsigned char portBit, int confidenceLevel)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	1f 92       	push	r1
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	69 83       	std	Y+1, r22	; 0x01
	if (bit_is_clear(pinOfButton, portBit))
  90:	69 81       	ldd	r22, Y+1	; 0x01
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	fb 01       	movw	r30, r22
  96:	02 c0       	rjmp	.+4      	; 0x9c <ButtonPressed+0x18>
  98:	f5 95       	asr	r31
  9a:	e7 95       	ror	r30
  9c:	4a 95       	dec	r20
  9e:	e2 f7       	brpl	.-8      	; 0x98 <ButtonPressed+0x14>
  a0:	e0 fd       	sbrc	r30, 0
  a2:	2a c0       	rjmp	.+84     	; 0xf8 <ButtonPressed+0x74>
	{
		Pressed_Confidence_Level[buttonNumber] ++; //Increase Pressed Confidence
  a4:	bc 01       	movw	r22, r24
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	fb 01       	movw	r30, r22
  ac:	ee 5f       	subi	r30, 0xFE	; 254
  ae:	fe 4f       	sbci	r31, 0xFE	; 254
  b0:	40 81       	ld	r20, Z
  b2:	51 81       	ldd	r21, Z+1	; 0x01
  b4:	4f 5f       	subi	r20, 0xFF	; 255
  b6:	5f 4f       	sbci	r21, 0xFF	; 255
  b8:	51 83       	std	Z+1, r21	; 0x01
  ba:	40 83       	st	Z, r20
		Released_Confidence_Level[buttonNumber] = 0; //Reset released button confidence since there is a button press
  bc:	fb 01       	movw	r30, r22
  be:	e0 50       	subi	r30, 0x00	; 0
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	11 82       	std	Z+1, r1	; 0x01
  c4:	10 82       	st	Z, r1
		if (Pressed_Confidence_Level[buttonNumber] > confidenceLevel) //Indicator of good button press
  c6:	24 17       	cp	r18, r20
  c8:	35 07       	cpc	r19, r21
  ca:	ac f5       	brge	.+106    	; 0x136 <ButtonPressed+0xb2>
		{
			if (Pressed[buttonNumber] == 0)
  cc:	fc 01       	movw	r30, r24
  ce:	ec 5f       	subi	r30, 0xFC	; 252
  d0:	fe 4f       	sbci	r31, 0xFE	; 254
  d2:	20 81       	ld	r18, Z
  d4:	21 11       	cpse	r18, r1
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <ButtonPressed+0x62>
			{
				Pressed[buttonNumber] = 1;
  d8:	fc 01       	movw	r30, r24
  da:	ec 5f       	subi	r30, 0xFC	; 252
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	20 83       	st	Z, r18
				return 1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	2b c0       	rjmp	.+86     	; 0x13c <ButtonPressed+0xb8>
			}
			//Zero it so a new pressed condition can be evaluated
			Pressed_Confidence_Level[buttonNumber] = 0;
  e6:	fc 01       	movw	r30, r24
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 5f       	subi	r30, 0xFE	; 254
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	11 82       	std	Z+1, r1	; 0x01
  f2:	10 82       	st	Z, r1
		{
			Pressed[buttonNumber] = 0;
			Released_Confidence_Level[buttonNumber] = 0;
		}
	}
	return 0;
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	22 c0       	rjmp	.+68     	; 0x13c <ButtonPressed+0xb8>
			Pressed_Confidence_Level[buttonNumber] = 0;
		}
	}
	else
	{
		Released_Confidence_Level[buttonNumber] ++; //This works just like the pressed
  f8:	bc 01       	movw	r22, r24
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	fb 01       	movw	r30, r22
 100:	e0 50       	subi	r30, 0x00	; 0
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	40 81       	ld	r20, Z
 106:	51 81       	ldd	r21, Z+1	; 0x01
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	51 83       	std	Z+1, r21	; 0x01
 10e:	40 83       	st	Z, r20
		Pressed_Confidence_Level[buttonNumber] = 0; //Reset pressed button confidence since the button is released
 110:	fb 01       	movw	r30, r22
 112:	ee 5f       	subi	r30, 0xFE	; 254
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	11 82       	std	Z+1, r1	; 0x01
 118:	10 82       	st	Z, r1
		if (Released_Confidence_Level[buttonNumber] > confidenceLevel)
 11a:	24 17       	cp	r18, r20
 11c:	35 07       	cpc	r19, r21
 11e:	6c f4       	brge	.+26     	; 0x13a <ButtonPressed+0xb6>
		{
			Pressed[buttonNumber] = 0;
 120:	fc 01       	movw	r30, r24
 122:	ec 5f       	subi	r30, 0xFC	; 252
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	10 82       	st	Z, r1
			Released_Confidence_Level[buttonNumber] = 0;
 128:	fb 01       	movw	r30, r22
 12a:	e0 50       	subi	r30, 0x00	; 0
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	11 82       	std	Z+1, r1	; 0x01
 130:	10 82       	st	Z, r1
		}
	}
	return 0;
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	03 c0       	rjmp	.+6      	; 0x13c <ButtonPressed+0xb8>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	01 c0       	rjmp	.+2      	; 0x13c <ButtonPressed+0xb8>
 13a:	80 e0       	ldi	r24, 0x00	; 0
}
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <main>:
#include <avr/io.h>
#include "ButtonPress.h"

int main(void)
{
	DDRD = 0b00001000;
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1 << PIND2);
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	8b b9       	out	0x0b, r24	; 11
	
    while(1)
    {
       if(ButtonPressed(0, PIND, 0, 200))
	   PORTD ^= (1 << PIND2);
 14c:	c4 e0       	ldi	r28, 0x04	; 4
	DDRD = 0b00001000;
	PORTD = (1 << PIND2);
	
    while(1)
    {
       if(ButtonPressed(0, PIND, 0, 200))
 14e:	69 b1       	in	r22, 0x09	; 9
 150:	28 ec       	ldi	r18, 0xC8	; 200
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 42 00 	call	0x84	; 0x84 <ButtonPressed>
 15e:	88 23       	and	r24, r24
 160:	b1 f3       	breq	.-20     	; 0x14e <main+0xa>
	   PORTD ^= (1 << PIND2);
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	8c 27       	eor	r24, r28
 166:	8b b9       	out	0x0b, r24	; 11
 168:	f2 cf       	rjmp	.-28     	; 0x14e <main+0xa>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
